{"version":3,"file":"static/js/6258.cfd9b53e.chunk.js","mappings":"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","sources":["../../../packages/uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery.ts","../../../packages/uniswap/src/data/rest/getPosition.ts","components/Liquidity/LiquidityModalHeader.tsx","components/Liquidity/TokenInfo.tsx","pages/MigrateV3/MigrateV3LiquidityTxContext.tsx","pages/MigrateV3/index.tsx"],"sourcesContent":["import { UseQueryResult, skipToken, useQuery } from '@tanstack/react-query'\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\nimport { TRADING_API_CACHE_KEY, migrateLpPosition } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\nimport { MigrateLPPositionRequest, MigrateLPPositionResponse } from 'uniswap/src/data/tradingApi/__generated__'\n\nexport function useMigrateV3LpPositionCalldataQuery({\n  params,\n  ...rest\n}: UseQueryApiHelperHookArgs<\n  MigrateLPPositionRequest,\n  MigrateLPPositionResponse\n>): UseQueryResult<MigrateLPPositionResponse> {\n  const queryKey = [TRADING_API_CACHE_KEY, uniswapUrls.tradingApiPaths.migrate, params]\n\n  return useQuery<MigrateLPPositionResponse>({\n    queryKey,\n    queryFn: params ? async (): ReturnType<typeof migrateLpPosition> => await migrateLpPosition(params) : skipToken,\n    ...rest,\n  })\n}\n","/* eslint-disable no-restricted-imports */\nimport { PartialMessage } from '@bufbuild/protobuf'\nimport { ConnectError } from '@connectrpc/connect'\nimport { useQuery } from '@connectrpc/connect-query'\nimport { UseQueryResult } from '@tanstack/react-query'\nimport { getPosition } from '@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery'\nimport { GetPositionRequest, GetPositionResponse } from '@uniswap/client-pools/dist/pools/v1/api_pb'\nimport { uniswapGetTransport } from 'uniswap/src/data/rest/base'\n\nexport function useGetPositionQuery(\n  input?: PartialMessage<GetPositionRequest>,\n): UseQueryResult<GetPositionResponse, ConnectError> {\n  return useQuery(getPosition, input, { transport: uniswapGetTransport, enabled: !!input })\n}\n","\"use strict\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { CloseIcon } from \"theme/components\";\nimport { Flex, Text, TouchableArea } from \"ui/src\";\nimport { BackArrow } from \"ui/src/components/icons/BackArrow\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { SwapFormSettings } from \"uniswap/src/features/transactions/swap/form/SwapFormSettings\";\nimport { Deadline } from \"uniswap/src/features/transactions/swap/settings/configs/Deadline\";\nimport { Slippage } from \"uniswap/src/features/transactions/swap/settings/configs/Slippage\";\nexport function LiquidityModalHeader({\n  title,\n  closeModal,\n  goBack\n}) {\n  const { t } = useTranslation();\n  const CloseIconComponent = useMemo(\n    () => <CloseIcon data-testid=\"LiquidityModalHeader-close\" onClick={closeModal} size={iconSizes.icon24} />,\n    [closeModal]\n  );\n  return <Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$spacing4\" width=\"100%\">{goBack ? <TouchableArea onPress={goBack}><BackArrow color=\"$neutral1\" size=\"$icon.24\" /></TouchableArea> : CloseIconComponent}<Text variant=\"body2\" flexGrow={1} textAlign=\"center\" pr={24}>{title}</Text>{!goBack ? <SwapFormSettings\n    adjustTopAlignment={false}\n    settings={[Slippage, Deadline]}\n    defaultTitle={t(\"pool.positions.transaction.settings\")}\n  /> : <Flex position=\"absolute\" top=\"0\" right=\"0\" p=\"$spacing4\">{CloseIconComponent}</Flex>}</Flex>;\n}\n","\"use strict\";\nimport CurrencyLogo from \"components/Logo/CurrencyLogo\";\nimport { Flex, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { getSymbolDisplayText } from \"uniswap/src/utils/currency\";\nimport { NumberType } from \"utilities/src/format/types\";\nexport function TokenInfo({\n  currencyAmount,\n  currencyUSDAmount\n}) {\n  const { formatCurrencyAmount } = useLocalizationContext();\n  return <Flex row alignItems=\"center\"><Flex grow><Text variant=\"heading2\">{formatCurrencyAmount({\n    value: currencyAmount,\n    type: NumberType.TokenNonTx\n  })}{\" \"}{getSymbolDisplayText(currencyAmount?.currency.symbol)}</Text><Text variant=\"body3\" color=\"$neutral2\">{formatCurrencyAmount({\n    value: currencyUSDAmount,\n    type: NumberType.FiatStandard\n  })}</Text></Flex><CurrencyLogo currency={currencyAmount?.currency} size={iconSizes.icon36} /></Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { useV3OrV4PositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport { useCreatePositionContext, usePriceRangeContext } from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { createContext, useContext, useMemo } from \"react\";\nimport { useCheckLpApprovalQuery } from \"uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery\";\nimport { useMigrateV3LpPositionCalldataQuery } from \"uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery\";\nimport {\n  ProtocolItems\n} from \"uniswap/src/data/tradingApi/__generated__\";\nimport {\n  LiquidityTransactionType\n} from \"uniswap/src/features/transactions/liquidity/types\";\nimport { validatePermit, validateTransactionRequest } from \"uniswap/src/features/transactions/swap/utils/trade\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nimport { useAccount } from \"wagmi\";\nconst MigrateV3PositionTxContext = createContext(void 0);\nexport function useMigrateV3TxContext() {\n  const context = useContext(MigrateV3PositionTxContext);\n  if (!context) {\n    throw new Error(\"useMigrateV3TxContext must be used within a MigrateV3PositionTxContextProvider\");\n  }\n  return context;\n}\nexport function MigrateV3PositionTxContextProvider({\n  children,\n  positionInfo\n}) {\n  const account = useAccount();\n  const { derivedPositionInfo, positionState } = useCreatePositionContext();\n  const { feeValue0, feeValue1 } = useV3OrV4PositionDerivedInfo(positionInfo);\n  const {\n    derivedPriceRangeInfo,\n    priceRangeState: { fullRange }\n  } = usePriceRangeContext();\n  const increaseLiquidityApprovalParams = useMemo(() => {\n    if (!positionInfo || !account.address) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: true,\n      walletAddress: account.address,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      protocol: ProtocolItems.V3,\n      positionToken: positionInfo.tokenId\n    };\n  }, [positionInfo, account.address]);\n  const {\n    data: migrateTokenApprovals,\n    error: approvalError,\n    refetch: approvalRefetch\n  } = useCheckLpApprovalQuery({\n    params: increaseLiquidityApprovalParams,\n    headers: {\n      \"x-universal-router-version\": \"2.0\"\n    },\n    staleTime: 5 * ONE_SECOND_MS\n  });\n  const migratePositionRequestArgs = useMemo(() => {\n    if (!derivedPositionInfo || !positionInfo || !positionInfo.tokenId || !account?.address || !derivedPriceRangeInfo || derivedPositionInfo.protocolVersion !== ProtocolVersion.V4 || derivedPriceRangeInfo.protocolVersion !== ProtocolVersion.V4 || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    const destinationPool = derivedPositionInfo.pool ?? derivedPriceRangeInfo.mockPool;\n    if (!destinationPool) {\n      return void 0;\n    }\n    const tickLower = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[0] : derivedPriceRangeInfo.ticks?.[0];\n    const tickUpper = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[1] : derivedPriceRangeInfo.ticks?.[1];\n    if (!tickLower || !tickUpper || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    return {\n      inputProtocol: ProtocolItems.V3,\n      tokenId: Number(positionInfo.tokenId),\n      inputPosition: {\n        pool: {\n          token0: positionInfo.currency0Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency0Amount.currency.address,\n          token1: positionInfo.currency1Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency1Amount.currency.address,\n          fee: positionInfo.feeTier ? Number(positionInfo.feeTier) : void 0,\n          tickSpacing: positionInfo?.tickSpacing ? Number(positionInfo?.tickSpacing) : void 0\n        },\n        tickLower: positionInfo.tickLower ? Number(positionInfo.tickLower) : void 0,\n        tickUpper: positionInfo.tickUpper ? Number(positionInfo.tickUpper) : void 0\n      },\n      inputPoolLiquidity: positionInfo.pool.liquidity.toString(),\n      inputCurrentTick: positionInfo.pool.tickCurrent,\n      inputSqrtRatioX96: positionInfo.pool.sqrtRatioX96?.toString(),\n      inputPositionLiquidity: positionInfo.liquidity,\n      outputProtocol: ProtocolItems.V4,\n      outputPosition: {\n        pool: {\n          token0: positionInfo.currency0Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency0Amount.currency.address,\n          token1: positionInfo.currency1Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency1Amount.currency.address,\n          fee: positionState.fee.feeAmount,\n          hooks: positionState.hook,\n          tickSpacing: destinationPool.tickSpacing\n        },\n        tickLower,\n        tickUpper\n      },\n      outputPoolLiquidity: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.liquidity.toString(),\n      outputSqrtRatioX96: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.sqrtRatioX96.toString(),\n      outputCurrentTick: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.tickCurrent,\n      initialPrice: derivedPositionInfo.creatingPoolOrPair ? destinationPool.sqrtRatioX96.toString() : void 0,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      walletAddress: account.address,\n      expectedTokenOwed0RawAmount: feeValue0?.quotient.toString() ?? \"0\",\n      expectedTokenOwed1RawAmount: feeValue1?.quotient.toString() ?? \"0\",\n      amount0: positionInfo.currency0Amount.quotient.toString(),\n      amount1: positionInfo.currency1Amount.quotient.toString()\n    };\n  }, [\n    derivedPositionInfo,\n    positionInfo,\n    account,\n    derivedPriceRangeInfo,\n    fullRange,\n    positionState.fee.feeAmount,\n    positionState.hook,\n    feeValue0?.quotient,\n    feeValue1?.quotient\n  ]);\n  const {\n    data: migrateCalldata,\n    error: migrateError,\n    refetch: migrateRefetch\n  } = useMigrateV3LpPositionCalldataQuery({\n    params: migratePositionRequestArgs,\n    staleTime: 5 * ONE_SECOND_MS\n  });\n  const validatedValue = useMemo(() => {\n    if (!migrateCalldata) {\n      return void 0;\n    }\n    const validatedPermitRequest = validatePermit(migrateTokenApprovals?.permitData);\n    if (migrateTokenApprovals?.permitData && !validatedPermitRequest) {\n      return void 0;\n    }\n    const txRequest = validateTransactionRequest(migrateCalldata.migrate);\n    if (!txRequest) {\n      return void 0;\n    }\n    return {\n      type: LiquidityTransactionType.Migrate,\n      unsigned: Boolean(migrateTokenApprovals?.permitData),\n      migratePositionRequestArgs,\n      approveToken0Request: void 0,\n      approveToken1Request: void 0,\n      permit: validatedPermitRequest,\n      protocolVersion: ProtocolVersion.V3,\n      approvePositionTokenRequest: void 0,\n      revocationTxRequest: void 0,\n      txRequest,\n      action: {\n        type: LiquidityTransactionType.Migrate,\n        currency0Amount: positionInfo.currency0Amount,\n        currency1Amount: positionInfo.currency1Amount\n      }\n    };\n  }, [\n    migrateCalldata,\n    migratePositionRequestArgs,\n    migrateTokenApprovals,\n    positionInfo.currency0Amount,\n    positionInfo.currency1Amount\n  ]);\n  return <MigrateV3PositionTxContext.Provider\n    value={{\n      txInfo: validatedValue,\n      error: Boolean(approvalError || migrateError),\n      refetch: approvalError ? approvalRefetch : migrateError ? migrateRefetch : void 0\n    }}\n  >{children}</MigrateV3PositionTxContext.Provider>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { BreadcrumbNavContainer, BreadcrumbNavLink } from \"components/BreadcrumbNav\";\nimport { LiquidityModalHeader } from \"components/Liquidity/LiquidityModalHeader\";\nimport { LiquidityPositionCard } from \"components/Liquidity/LiquidityPositionCard\";\nimport { TokenInfo } from \"components/Liquidity/TokenInfo\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { parseRestPosition } from \"components/Liquidity/utils\";\nimport { LoadingRows } from \"components/Loader/styled\";\nimport { PoolProgressIndicator } from \"components/PoolProgressIndicator/PoolProgressIndicator\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { MigrateV3PositionTxContextProvider, useMigrateV3TxContext } from \"pages/MigrateV3/MigrateV3LiquidityTxContext\";\nimport {\n  CreatePositionContextProvider,\n  DepositContextProvider,\n  PriceRangeContextProvider\n} from \"pages/Pool/Positions/create/ContextProviders\";\nimport {\n  DEFAULT_DEPOSIT_STATE,\n  DEFAULT_PRICE_RANGE_STATE,\n  useCreatePositionContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { EditSelectTokensStep } from \"pages/Pool/Positions/create/EditStep\";\nimport { SelectPriceRangeStep } from \"pages/Pool/Positions/create/RangeSelectionStep\";\nimport { SelectTokensStep } from \"pages/Pool/Positions/create/SelectTokenStep\";\nimport { TradingAPIError } from \"pages/Pool/Positions/create/TradingAPIError\";\nimport { DEFAULT_POSITION_STATE, PositionFlowStep } from \"pages/Pool/Positions/create/types\";\nimport { LoadingRow } from \"pages/Pool/Positions/shared\";\nimport { useMemo, useState } from \"react\";\nimport { ChevronRight } from \"react-feather\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { Navigate, useNavigate, useParams } from \"react-router-dom\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { ClickableTamaguiStyle } from \"theme/components\";\nimport { PositionField } from \"types/position\";\nimport { Flex, Main, Text, styled, useMedia } from \"ui/src\";\nimport { ArrowDown } from \"ui/src/components/icons/ArrowDown\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nimport { ProgressIndicator } from \"uniswap/src/components/ConfirmSwapModal/ProgressIndicator\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { useGetPositionQuery } from \"uniswap/src/data/rest/getPosition\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlagWithLoading } from \"uniswap/src/features/gating/hooks\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { isValidLiquidityTxContext } from \"uniswap/src/features/transactions/liquidity/types\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/swap/hooks/useUSDCPrice\";\nimport { currencyId, currencyIdToAddress } from \"uniswap/src/utils/currencyId\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nimport { useChainIdFromUrlParam } from \"utils/chainParams\";\nimport { useAccount } from \"wagmi\";\nconst BodyWrapper = styled(Main, {\n  backgroundColor: \"$surface1\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  gap: 60,\n  mt: \"1rem\",\n  mx: \"auto\",\n  width: \"100%\",\n  zIndex: \"$default\",\n  p: 24\n});\nfunction MigrateV3Inner({ positionInfo }) {\n  const { chainName, tokenId } = useParams();\n  const trace = useTrace();\n  const { t } = useTranslation();\n  const { positionState, setPositionState, setStep, step } = useCreatePositionContext();\n  const { protocolVersion } = positionState;\n  const { setPriceRangeState } = usePriceRangeContext();\n  const { setDepositState } = useDepositContext();\n  const { value: lpRedesignEnabled, isLoading: isLPRedesignGateLoading } = useFeatureFlagWithLoading(\n    FeatureFlags.LPRedesign\n  );\n  const [transactionSteps, setTransactionSteps] = useState([]);\n  const [currentTransactionStep, setCurrentTransactionStep] = useState();\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const account = useAccountMeta();\n  const dispatch = useDispatch();\n  const { txInfo, error, refetch } = useMigrateV3TxContext();\n  const media = useMedia();\n  const navigate = useNavigate();\n  const onClose = () => {\n    setCurrentTransactionStep(void 0);\n  };\n  const { currency0Amount, currency1Amount } = positionInfo;\n  const currency0FiatAmount = useUSDCValue(currency0Amount) ?? void 0;\n  const currency1FiatAmount = useUSDCValue(currency1Amount) ?? void 0;\n  if (!isLPRedesignGateLoading && !lpRedesignEnabled) {\n    return <Navigate to=\"/pools\" replace />;\n  }\n  if (isLPRedesignGateLoading) {\n    return null;\n  }\n  return <><Flex mt=\"$spacing48\" gap=\"$gap36\"><BreadcrumbNavContainer aria-label=\"breadcrumb-nav\"><BreadcrumbNavLink to=\"/positions\"><Trans i18nKey=\"pool.positions.title\" /> <ChevronRight size={14} /></BreadcrumbNavLink><BreadcrumbNavLink to={`/positions/v3/${chainName}/${tokenId}`}>{currency0Amount.currency.symbol} / {currency1Amount.currency.symbol} <ChevronRight size={14} /></BreadcrumbNavLink></BreadcrumbNavContainer><Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$gap20\" width=\"100%\"><Text width=\"100%\" variant=\"heading2\"><Trans i18nKey=\"common.migrate.position\" /></Text><Flex\n    row\n    backgroundColor=\"$surface2\"\n    borderRadius=\"$rounded12\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    gap=\"$gap4\"\n    py=\"$padding8\"\n    px=\"$padding12\"\n    {...ClickableTamaguiStyle}\n    onPress={() => {\n      setPositionState({\n        ...DEFAULT_POSITION_STATE,\n        protocolVersion,\n        currencyInputs: {\n          [PositionField.TOKEN0]: currency0Amount.currency,\n          [PositionField.TOKEN1]: currency1Amount.currency\n        }\n      });\n      setPriceRangeState(DEFAULT_PRICE_RANGE_STATE);\n      setDepositState(DEFAULT_DEPOSIT_STATE);\n      setStep(PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER);\n    }}\n  ><RotateLeft color=\"$neutral1\" size={16} /><Text variant=\"buttonLabel4\" color=\"$neutral2\"><Trans i18nKey=\"common.button.reset\" /></Text></Flex></Flex><Flex row gap={32} width=\"100%\">{!media.xl && <Flex width={360}><PoolProgressIndicator\n    steps={[\n      { label: t(\"migrate.selectFeeTier\"), active: step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER },\n      { label: t(\"migrate.setRange\"), active: step === PositionFlowStep.PRICE_RANGE }\n    ]}\n  /></Flex>}<Flex gap=\"$gap16\" maxWidth=\"calc(min(580px, 90vw))\"><LiquidityPositionCard liquidityPosition={positionInfo} /><Flex justifyContent=\"center\" alignItems=\"center\"><Flex shrink backgroundColor=\"$surface2\" borderRadius=\"$rounded12\" p=\"$padding12\"><ArrowDown size={20} color=\"$neutral1\" /></Flex></Flex>{step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER ? <SelectTokensStep\n    width=\"100%\"\n    maxWidth=\"unset\"\n    tokensLocked\n    onContinue={() => {\n      setStep(PositionFlowStep.PRICE_RANGE);\n    }}\n  /> : <EditSelectTokensStep width=\"100%\" maxWidth=\"unset\" />}{step === PositionFlowStep.PRICE_RANGE && <><SelectPriceRangeStep\n    width=\"100%\"\n    maxWidth=\"unset\"\n    onDisableContinue={!txInfo || error}\n    onContinue={() => {\n      const isValidTx = isValidLiquidityTxContext(txInfo);\n      if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx) {\n        return;\n      }\n      dispatch(\n        liquiditySaga.actions.trigger({\n          selectChain,\n          startChainId,\n          account,\n          liquidityTxContext: txInfo,\n          setCurrentStep: setCurrentTransactionStep,\n          setSteps: setTransactionSteps,\n          onSuccess: () => {\n            onClose();\n            navigate(\"/positions\");\n          },\n          onFailure: onClose,\n          analytics: {\n            ...getLPBaseAnalyticsProperties({\n              trace,\n              fee: positionInfo.feeTier,\n              currency0: currency0Amount.currency,\n              currency1: currency1Amount.currency,\n              currency0AmountUsd: currency0FiatAmount,\n              currency1AmountUsd: currency1FiatAmount,\n              poolId: positionInfo.poolId,\n              version: protocolVersion,\n              chainId: startChainId\n            }),\n            action: \"V3->V4\"\n          }\n        })\n      );\n    }}\n  />{error && <TradingAPIError refetch={refetch} />}</>}</Flex></Flex></Flex><Modal\n    name={ModalName.MigrateLiquidity}\n    onClose={onClose}\n    isDismissible\n    isModalOpen={Boolean(currentTransactionStep)}\n  ><LiquidityModalHeader title={t(\"pool.migrateLiquidity\")} closeModal={onClose} /><Flex gap=\"$gap16\" px=\"$padding16\" my=\"$spacing8\"><TokenInfo currencyAmount={currency0Amount} currencyUSDAmount={currency0FiatAmount} /><Text variant=\"body3\" color=\"$neutral2\">{t(\"common.and\")}</Text><TokenInfo currencyAmount={currency1Amount} currencyUSDAmount={currency1FiatAmount} /></Flex><ProgressIndicator steps={transactionSteps} currentStep={currentTransactionStep} /></Modal></>;\n}\nexport default function MigrateV3() {\n  const { tokenId } = useParams();\n  const chainId = useChainIdFromUrlParam();\n  const account = useAccount();\n  const { data, isLoading: positionLoading } = useGetPositionQuery(\n    account.address ? {\n      owner: account.address,\n      protocolVersion: ProtocolVersion.V3,\n      tokenId,\n      chainId: chainId ?? account.chainId\n    } : void 0\n  );\n  const position = data?.position;\n  const positionInfo = useMemo(() => parseRestPosition(position), [position]);\n  if (positionLoading || !position || !positionInfo || positionInfo.version !== ProtocolVersion.V3) {\n    return <BodyWrapper><LoadingRows><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /><LoadingRow /></LoadingRows></BodyWrapper>;\n  }\n  const { currency0Amount, currency1Amount, feeTier } = positionInfo;\n  return <Trace\n    logImpression\n    page={InterfacePageNameLocal.MigrateV3}\n    properties={{\n      pool_address: positionInfo.poolId,\n      chain_id: chainId ?? account.chainId,\n      label: [currency0Amount.currency.symbol, currency1Amount.currency.symbol].join(\"/\"),\n      fee_tier: feeTier,\n      token0Address: currencyIdToAddress(currencyId(currency0Amount.currency)),\n      token1Address: currencyIdToAddress(currencyId(currency1Amount.currency))\n    }}\n  ><CreatePositionContextProvider\n    initialState={{\n      currencyInputs: {\n        [PositionField.TOKEN0]: currency0Amount.currency,\n        [PositionField.TOKEN1]: currency1Amount.currency\n      }\n    }}\n  ><PriceRangeContextProvider><DepositContextProvider><MigrateV3PositionTxContextProvider positionInfo={positionInfo}><MigrateV3Inner positionInfo={positionInfo} /></MigrateV3PositionTxContextProvider></DepositContextProvider></PriceRangeContextProvider></CreatePositionContextProvider></Trace>;\n}\n"],"names":["_ref","params","rest","_objectWithoutProperties2","default","_excluded","queryKey","TRADING_API_CACHE_KEY","uniswapUrls","tradingApiPaths","migrate","useQuery","Object","assign","queryFn","_asyncToGenerator2","migrateLpPosition","skipToken","_reactQuery","require","_urls","_TradingApiClient","input","getPosition","transport","uniswapGetTransport","enabled","_connectQuery","_apiPoolsService_connectquery","_base","LiquidityModalHeader","title","closeModal","goBack","t","useTranslation","CloseIconComponent","useMemo","CloseIcon","data-testid","onClick","size","iconSizes","icon24","Flex","row","justifyContent","alignItems","gap","width","TouchableArea","onPress","BackArrow","color","Text","variant","flexGrow","textAlign","pr","position","top","right","p","SwapFormSettings","adjustTopAlignment","settings","Slippage","Deadline","defaultTitle","TokenInfo","currencyAmount","currencyUSDAmount","formatCurrencyAmount","useLocalizationContext","grow","value","type","NumberType","TokenNonTx","getSymbolDisplayText","currency","symbol","FiatStandard","CurrencyLogo","icon36","MigrateV3PositionTxContext","createContext","MigrateV3PositionTxContextProvider","children","positionInfo","feeValue0","feeValue1","account","useAccount","derivedPositionInfo","positionState","useCreatePositionContext","useV3OrV4PositionDerivedInfo","derivedPriceRangeInfo","priceRangeState","fullRange","usePriceRangeContext","increaseLiquidityApprovalParams","address","simulateTransaction","walletAddress","chainId","currency0Amount","protocol","ProtocolItems","V3","positionToken","tokenId","data","migrateTokenApprovals","error","approvalError","refetch","approvalRefetch","useCheckLpApprovalQuery","headers","staleTime","ONE_SECOND_MS","migratePositionRequestArgs","protocolVersion","ProtocolVersion","V4","pool","liquidity","destinationPool","mockPool","tickLower","tickSpaceLimits","ticks","tickUpper","inputProtocol","Number","inputPosition","token0","isNative","ZERO_ADDRESS","token1","currency1Amount","fee","feeTier","tickSpacing","inputPoolLiquidity","toString","inputCurrentTick","tickCurrent","inputSqrtRatioX96","sqrtRatioX96","inputPositionLiquidity","outputProtocol","outputPosition","feeAmount","hooks","hook","outputPoolLiquidity","creatingPoolOrPair","outputSqrtRatioX96","outputCurrentTick","initialPrice","expectedTokenOwed0RawAmount","quotient","expectedTokenOwed1RawAmount","amount0","amount1","migrateCalldata","migrateError","migrateRefetch","useMigrateV3LpPositionCalldataQuery","validatedValue","validatedPermitRequest","validatePermit","permitData","txRequest","validateTransactionRequest","LiquidityTransactionType","Migrate","unsigned","Boolean","approveToken0Request","approveToken1Request","permit","approvePositionTokenRequest","revocationTxRequest","action","Provider","txInfo","BodyWrapper","styled","Main","backgroundColor","display","flexDirection","mt","mx","zIndex","MigrateV3Inner","chainName","useParams","trace","useTrace","setPositionState","setStep","step","setPriceRangeState","setDepositState","useDepositContext","lpRedesignEnabled","isLoading","isLPRedesignGateLoading","useFeatureFlagWithLoading","FeatureFlags","LPRedesign","transactionSteps","setTransactionSteps","useState","currentTransactionStep","setCurrentTransactionStep","selectChain","useSelectChain","startChainId","useAccountMeta","dispatch","useDispatch","context","useContext","Error","useMigrateV3TxContext","media","useMedia","navigate","useNavigate","onClose","currency0FiatAmount","useUSDCValue","currency1FiatAmount","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","to","Trans","i18nKey","ChevronRight","borderRadius","py","px","ClickableTamaguiStyle","DEFAULT_POSITION_STATE","currencyInputs","PositionField","TOKEN0","TOKEN1","DEFAULT_PRICE_RANGE_STATE","DEFAULT_DEPOSIT_STATE","PositionFlowStep","SELECT_TOKENS_AND_FEE_TIER","RotateLeft","xl","PoolProgressIndicator","steps","label","active","PRICE_RANGE","maxWidth","LiquidityPositionCard","liquidityPosition","shrink","ArrowDown","SelectTokensStep","tokensLocked","onContinue","EditSelectTokensStep","SelectPriceRangeStep","onDisableContinue","isValidTx","isValidLiquidityTxContext","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","setSteps","onSuccess","onFailure","analytics","getLPBaseAnalyticsProperties","currency0","currency1","currency0AmountUsd","currency1AmountUsd","poolId","version","TradingAPIError","Modal","name","ModalName","MigrateLiquidity","isDismissible","isModalOpen","my","ProgressIndicator","currentStep","Navigate","replace","MigrateV3","useChainIdFromUrlParam","positionLoading","useGetPositionQuery","owner","parseRestPosition","LoadingRows","LoadingRow","Trace","logImpression","page","InterfacePageNameLocal","properties","pool_address","chain_id","join","fee_tier","token0Address","currencyIdToAddress","currencyId","token1Address","CreatePositionContextProvider","initialState","PriceRangeContextProvider","DepositContextProvider"],"sourceRoot":""}