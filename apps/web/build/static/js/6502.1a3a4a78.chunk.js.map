{"version":3,"file":"static/js/6502.1a3a4a78.chunk.js","mappings":"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","sources":["lib/hooks/routing/clientSideSmartOrderRouter.ts","utils/transformSwapRouteToGetQuoteResult.ts"],"sourcesContent":["\"use strict\";\nimport { CurrencyAmount, Token, TradeType } from \"@uniswap/sdk-core\";\nimport { AlphaRouter } from \"@uniswap/smart-order-router\";\nimport { RPC_PROVIDERS } from \"constants/providers\";\nimport JSBI from \"jsbi\";\nimport { QuoteState, SwapRouterNativeAssets } from \"state/routing/types\";\nimport { nativeOnChain } from \"uniswap/src/constants/tokens\";\nimport { getChainInfo } from \"uniswap/src/features/chains/chainInfo\";\nimport { isUniverseChainId } from \"uniswap/src/features/chains/types\";\nimport { transformSwapRouteToGetQuoteResult } from \"utils/transformSwapRouteToGetQuoteResult\";\nconst routers = /* @__PURE__ */ new Map();\nexport function getRouter(chainId) {\n  const router = routers.get(chainId);\n  if (router) {\n    return router;\n  }\n  if (isUniverseChainId(chainId) && getChainInfo(chainId).supportsInterfaceClientSideRouting) {\n    const provider = RPC_PROVIDERS[chainId];\n    const router2 = new AlphaRouter({ chainId: getChainInfo(chainId).sdkId, provider });\n    routers.set(chainId, router2);\n    return router2;\n  }\n  throw new Error(`Router does not support this chain (chainId: ${chainId}).`);\n}\nasync function getQuote({\n  tradeType,\n  tokenIn,\n  tokenOut,\n  amount: amountRaw\n}, router, routerConfig) {\n  const tokenInIsNative = Object.values(SwapRouterNativeAssets).includes(tokenIn.address);\n  const tokenOutIsNative = Object.values(SwapRouterNativeAssets).includes(tokenOut.address);\n  const currencyIn = tokenInIsNative ? nativeOnChain(tokenIn.chainId) : new Token(tokenIn.chainId, tokenIn.address, tokenIn.decimals, tokenIn.symbol);\n  const currencyOut = tokenOutIsNative ? nativeOnChain(tokenOut.chainId) : new Token(tokenOut.chainId, tokenOut.address, tokenOut.decimals, tokenOut.symbol);\n  const baseCurrency = tradeType === TradeType.EXACT_INPUT ? currencyIn : currencyOut;\n  const quoteCurrency = tradeType === TradeType.EXACT_INPUT ? currencyOut : currencyIn;\n  const amount = CurrencyAmount.fromRawAmount(baseCurrency, JSBI.BigInt(amountRaw));\n  const swapRoute = await router.route(\n    amount,\n    quoteCurrency,\n    tradeType,\n    /*swapConfig=*/\n    void 0,\n    routerConfig\n  );\n  if (!swapRoute) {\n    return { state: QuoteState.NOT_FOUND };\n  }\n  return transformSwapRouteToGetQuoteResult(tradeType, amount, swapRoute);\n}\nexport async function getClientSideQuote({\n  tokenInAddress,\n  tokenInChainId,\n  tokenInDecimals,\n  tokenInSymbol,\n  tokenOutAddress,\n  tokenOutChainId,\n  tokenOutDecimals,\n  tokenOutSymbol,\n  amount,\n  tradeType\n}, router, config) {\n  return getQuote(\n    {\n      tradeType,\n      tokenIn: {\n        address: tokenInAddress,\n        chainId: tokenInChainId,\n        decimals: tokenInDecimals,\n        symbol: tokenInSymbol\n      },\n      tokenOut: {\n        address: tokenOutAddress,\n        chainId: tokenOutChainId,\n        decimals: tokenOutDecimals,\n        symbol: tokenOutSymbol\n      },\n      amount\n    },\n    router,\n    config\n  );\n}\n","\"use strict\";\nimport { Protocol } from \"@uniswap/router-sdk\";\nimport { TradeType } from \"@uniswap/sdk-core\";\nimport { routeAmountsToString } from \"@uniswap/smart-order-router\";\nimport { Pool } from \"@uniswap/v3-sdk\";\nimport {\n  QuoteState,\n  URAQuoteType\n} from \"state/routing/types\";\nexport function transformSwapRouteToGetQuoteResult(tradeType, amount, {\n  quote,\n  quoteGasAdjusted,\n  route,\n  estimatedGasUsed,\n  estimatedGasUsedQuoteToken,\n  estimatedGasUsedUSD,\n  gasPriceWei,\n  methodParameters,\n  blockNumber\n}) {\n  const routeResponse = [];\n  for (const subRoute of route) {\n    const { amount: amount2, quote: quote2, tokenPath } = subRoute;\n    const pools = subRoute.protocol === Protocol.V2 ? subRoute.route.pairs : subRoute.route.pools;\n    const curRoute = [];\n    for (let i = 0; i < pools.length; i++) {\n      const nextPool = pools[i];\n      const tokenIn = tokenPath[i];\n      const tokenOut = tokenPath[i + 1];\n      let edgeAmountIn = void 0;\n      if (i === 0) {\n        edgeAmountIn = tradeType === TradeType.EXACT_INPUT ? amount2.quotient.toString() : quote2.quotient.toString();\n      }\n      let edgeAmountOut = void 0;\n      if (i === pools.length - 1) {\n        edgeAmountOut = tradeType === TradeType.EXACT_INPUT ? quote2.quotient.toString() : amount2.quotient.toString();\n      }\n      if (nextPool instanceof Pool) {\n        curRoute.push({\n          type: \"v3-pool\",\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol\n          },\n          fee: nextPool.fee.toString(),\n          liquidity: nextPool.liquidity.toString(),\n          sqrtRatioX96: nextPool.sqrtRatioX96.toString(),\n          tickCurrent: nextPool.tickCurrent.toString(),\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut\n        });\n      } else {\n        const reserve0 = nextPool.reserve0;\n        const reserve1 = nextPool.reserve1;\n        curRoute.push({\n          type: \"v2-pool\",\n          tokenIn: {\n            chainId: tokenIn.chainId,\n            decimals: tokenIn.decimals,\n            address: tokenIn.address,\n            symbol: tokenIn.symbol\n          },\n          tokenOut: {\n            chainId: tokenOut.chainId,\n            decimals: tokenOut.decimals,\n            address: tokenOut.address,\n            symbol: tokenOut.symbol\n          },\n          reserve0: {\n            token: {\n              chainId: reserve0.currency.wrapped.chainId,\n              decimals: reserve0.currency.wrapped.decimals,\n              address: reserve0.currency.wrapped.address,\n              symbol: reserve0.currency.wrapped.symbol\n            },\n            quotient: reserve0.quotient.toString()\n          },\n          reserve1: {\n            token: {\n              chainId: reserve1.currency.wrapped.chainId,\n              decimals: reserve1.currency.wrapped.decimals,\n              address: reserve1.currency.wrapped.address,\n              symbol: reserve1.currency.wrapped.symbol\n            },\n            quotient: reserve1.quotient.toString()\n          },\n          amountIn: edgeAmountIn,\n          amountOut: edgeAmountOut\n        });\n      }\n    }\n    routeResponse.push(curRoute);\n  }\n  const result = {\n    methodParameters,\n    blockNumber: blockNumber.toString(),\n    amount: amount.quotient.toString(),\n    amountDecimals: amount.toExact(),\n    quote: quote.quotient.toString(),\n    quoteDecimals: quote.toExact(),\n    quoteGasAdjusted: quoteGasAdjusted.quotient.toString(),\n    quoteGasAdjustedDecimals: quoteGasAdjusted.toExact(),\n    gasUseEstimateQuote: estimatedGasUsedQuoteToken.quotient.toString(),\n    gasUseEstimateQuoteDecimals: estimatedGasUsedQuoteToken.toExact(),\n    gasUseEstimate: estimatedGasUsed.toString(),\n    gasUseEstimateUSD: estimatedGasUsedUSD.toExact(),\n    gasPriceWei: gasPriceWei.toString(),\n    route: routeResponse,\n    routeString: routeAmountsToString(route)\n  };\n  return { state: QuoteState.SUCCESS, data: { routing: URAQuoteType.CLASSIC, quote: result, allQuotes: [] } };\n}\n"],"names":["routers","Map","getRouter","chainId","router","get","isUniverseChainId","getChainInfo","supportsInterfaceClientSideRouting","provider","RPC_PROVIDERS","router2","AlphaRouter","sdkId","set","Error","getQuote","tradeType","tokenIn","tokenOut","amount","amountRaw","routerConfig","tokenInIsNative","Object","values","SwapRouterNativeAssets","includes","address","tokenOutIsNative","currencyIn","nativeOnChain","Token","decimals","symbol","currencyOut","baseCurrency","TradeType","EXACT_INPUT","quoteCurrency","CurrencyAmount","fromRawAmount","JSBI","swapRoute","route","quote","quoteGasAdjusted","estimatedGasUsed","estimatedGasUsedQuoteToken","estimatedGasUsedUSD","gasPriceWei","methodParameters","blockNumber","routeResponse","subRoute","amount2","quote2","tokenPath","pools","protocol","Protocol","V2","pairs","curRoute","i","length","nextPool","edgeAmountIn","edgeAmountOut","quotient","toString","Pool","push","type","fee","liquidity","sqrtRatioX96","tickCurrent","amountIn","amountOut","reserve0","reserve1","token","currency","wrapped","result","amountDecimals","toExact","quoteDecimals","quoteGasAdjustedDecimals","gasUseEstimateQuote","gasUseEstimateQuoteDecimals","gasUseEstimate","gasUseEstimateUSD","routeString","routeAmountsToString","state","QuoteState","SUCCESS","data","routing","URAQuoteType","CLASSIC","allQuotes","transformSwapRouteToGetQuoteResult","NOT_FOUND","getClientSideQuote","config","tokenInAddress","tokenInChainId","tokenInDecimals","tokenInSymbol","tokenOutAddress","tokenOutChainId","tokenOutDecimals","tokenOutSymbol"],"sourceRoot":""}