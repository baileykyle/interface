{"version":3,"file":"static/js/8250.644487ec.chunk.js","mappings":"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","sources":["../../../packages/uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery.ts","components/PercentInput.tsx","hooks/useV2Pairs.ts","pages/Pool/Positions/create/TradingAPIError.tsx","pages/Pool/Positions/create/hooks.tsx","../../../packages/ui/src/components/icons/RotateLeft.tsx"],"sourcesContent":["import { UseQueryResult, skipToken, useQuery } from '@tanstack/react-query'\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\nimport { TRADING_API_CACHE_KEY, checkLpApproval } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\nimport { CheckApprovalLPRequest, CheckApprovalLPResponse } from 'uniswap/src/data/tradingApi/__generated__'\n\nexport function useCheckLpApprovalQuery({\n  params,\n  headers,\n  ...rest\n}: UseQueryApiHelperHookArgs<CheckApprovalLPRequest, CheckApprovalLPResponse> & {\n  headers?: Record<string, string>\n}): UseQueryResult<CheckApprovalLPResponse> {\n  const queryKey = [TRADING_API_CACHE_KEY, uniswapUrls.tradingApiPaths.lpApproval, params]\n\n  return useQuery<CheckApprovalLPResponse>({\n    queryKey,\n    queryFn: params\n      ? async (): ReturnType<typeof checkLpApproval> => await checkLpApproval(params, headers)\n      : skipToken,\n    ...rest,\n  })\n}\n","\"use strict\";\nimport { StyledInput, localeUsesComma } from \"components/NumericalInput\";\nimport { NumericalInputFontStyle } from \"pages/Swap/common/shared\";\nimport React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useCurrentLocale } from \"uniswap/src/features/language/hooks\";\nconst inputRegex = RegExp(`^\\\\d*(\\\\.\\\\d{0,2})?$`);\nconst PercentInput = forwardRef(\n  ({ value, onUserInput, placeholder, testId, ...rest }, ref) => {\n    const locale = useCurrentLocale();\n    const enforcer = (nextUserInput) => {\n      const sanitizedInput = nextUserInput.replace(/,/g, \".\");\n      if (sanitizedInput === \"\" || inputRegex.test(sanitizedInput)) {\n        onUserInput(sanitizedInput);\n      }\n    };\n    const formatValueWithLocale = (value2) => {\n      const [searchValue, replaceValue] = localeUsesComma(locale) ? [/\\./g, \",\"] : [/,/g, \".\"];\n      return value2.toString().replace(searchValue, replaceValue);\n    };\n    const valueFormattedWithLocale = formatValueWithLocale(value);\n    return <StyledInput\n      minLength={1}\n      maxLength={2}\n      {...rest}\n      ref={ref}\n      value={valueFormattedWithLocale}\n      data-testid={testId}\n      onChange={(event) => {\n        enforcer(event.target.value);\n      }}\n      inputMode=\"numeric\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      type=\"text\"\n      pattern=\"^\\\\d*(\\\\.\\\\d{0,2})?$\"\n      placeholder={placeholder || \"0\"}\n      spellCheck=\"false\"\n    />;\n  }\n);\nPercentInput.displayName = \"Input\";\nconst MemoizedInput = React.memo(PercentInput);\nexport const StyledPercentInput = styled(MemoizedInput)`\n  max-height: 84px;\n  max-width: 100%;\n  width: ${({ $width }) => `${$width ?? 43}px`}; // this value is from the size of a 0 which is the default value\n  ${NumericalInputFontStyle}\n\n  ::placeholder {\n    opacity: 1;\n  }\n`;\n","\"use strict\";\nimport { Interface } from \"@ethersproject/abi\";\nimport { CurrencyAmount, V2_FACTORY_ADDRESSES } from \"@uniswap/sdk-core\";\nimport IUniswapV2PairJSON from \"@uniswap/v2-core/build/IUniswapV2Pair.json\";\nimport { Pair, computePairAddress } from \"@uniswap/v2-sdk\";\nimport { useMultipleContractSingleData } from \"lib/hooks/multicall\";\nimport { useMemo } from \"react\";\nconst PAIR_INTERFACE = new Interface(IUniswapV2PairJSON.abi);\nexport var PairState = /* @__PURE__ */ ((PairState2) => {\n  PairState2[PairState2[\"LOADING\"] = 0] = \"LOADING\";\n  PairState2[PairState2[\"NOT_EXISTS\"] = 1] = \"NOT_EXISTS\";\n  PairState2[PairState2[\"EXISTS\"] = 2] = \"EXISTS\";\n  PairState2[PairState2[\"INVALID\"] = 3] = \"INVALID\";\n  return PairState2;\n})(PairState || {});\nexport function useV2Pairs(currencies) {\n  const tokens = useMemo(\n    () => currencies.map(([currencyA, currencyB]) => [currencyA?.wrapped, currencyB?.wrapped]),\n    [currencies]\n  );\n  const pairAddresses = useMemo(\n    () => tokens.map(([tokenA, tokenB]) => {\n      return tokenA && tokenB && tokenA.chainId === tokenB.chainId && !tokenA.equals(tokenB) && V2_FACTORY_ADDRESSES[tokenA.chainId] ? computePairAddress({ factoryAddress: V2_FACTORY_ADDRESSES[tokenA.chainId], tokenA, tokenB }) : void 0;\n    }),\n    [tokens]\n  );\n  const results = useMultipleContractSingleData(pairAddresses, PAIR_INTERFACE, \"getReserves\");\n  return useMemo(() => {\n    return results.map((result, i) => {\n      const { result: reserves, loading } = result;\n      const tokenA = tokens[i][0];\n      const tokenB = tokens[i][1];\n      if (loading) {\n        return [0 /* LOADING */, null];\n      }\n      if (!tokenA || !tokenB || tokenA.equals(tokenB)) {\n        return [3 /* INVALID */, null];\n      }\n      if (!reserves) {\n        return [1 /* NOT_EXISTS */, null];\n      }\n      const { reserve0, reserve1 } = reserves;\n      const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA];\n      return [\n        2 /* EXISTS */,\n        new Pair(\n          CurrencyAmount.fromRawAmount(token0, reserve0.toString()),\n          CurrencyAmount.fromRawAmount(token1, reserve1.toString())\n        )\n      ];\n    });\n  }, [results, tokens]);\n}\nexport function useV2Pair(tokenA, tokenB) {\n  const inputs = useMemo(() => [[tokenA, tokenB]], [tokenA, tokenB]);\n  return useV2Pairs(inputs)[0];\n}\n","\"use strict\";\nimport { useTranslation } from \"react-i18next\";\nimport { ClickableTamaguiStyle } from \"theme/components\";\nimport { Flex, Text, TouchableArea } from \"ui/src\";\nimport { AlertTriangleFilled } from \"ui/src/components/icons/AlertTriangleFilled\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nexport function TradingAPIError({ refetch }) {\n  const { t } = useTranslation();\n  return <Flex row gap=\"$spacing12\" backgroundColor=\"$surface2\" borderRadius=\"$rounded16\" p=\"$padding12\"><Flex backgroundColor=\"$statusCritical2\" p=\"$padding12\" borderRadius=\"$rounded12\" mb=\"auto\"><AlertTriangleFilled color=\"$statusCritical\" size=\"$icon.20\" /></Flex><Flex flexWrap=\"wrap\" flexShrink={1} gap=\"$gap4\"><Text color=\"$statusCritical\" variant=\"body3\">{t(\"common.card.error.description\")}</Text><Text variant=\"body3\" color=\"$neutral2\">{t(\"pool.liquidity.data.error.message\")}</Text>{Boolean(refetch) && <TouchableArea {...ClickableTamaguiStyle} onPress={refetch} mt=\"$spacing2\"><Flex row gap=\"$gap4\"><RotateLeft size=\"$icon.16\" color=\"$neutral1\" /><Text variant=\"buttonLabel3\">{t(\"common.button.tryAgain\")}</Text></Flex></TouchableArea>}</Flex></Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { getPoolFromRest } from \"components/Liquidity/utils\";\nimport { ConnectWalletButtonText } from \"components/NavBar/accountCTAsExperimentUtils\";\nimport { checkIsNative, useCurrency, useCurrencyInfo } from \"hooks/Tokens\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useIsPoolOutOfSync } from \"hooks/useIsPoolOutOfSync\";\nimport { PoolState, usePool } from \"hooks/usePools\";\nimport { useSwapTaxes } from \"hooks/useSwapTaxes\";\nimport { PairState, useV2Pair } from \"hooks/useV2Pairs\";\nimport { useCurrencyBalances } from \"lib/hooks/useCurrencyBalance\";\nimport tryParseCurrencyAmount from \"lib/utils/tryParseCurrencyAmount\";\nimport { useCreatePositionContext, usePriceRangeContext } from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport {\n  getCurrencyAddressWithWrap,\n  getCurrencyWithWrap,\n  getDependentAmountFromV2Pair,\n  getDependentAmountFromV3Position,\n  getDependentAmountFromV4Position,\n  getPairFromPositionStateAndRangeState,\n  getPoolFromPositionStateAndRangeState,\n  getSortedCurrenciesTuple,\n  getV2PriceRangeInfo,\n  getV3PriceRangeInfo,\n  getV4PriceRangeInfo,\n  pairEnabledProtocolVersion,\n  poolEnabledProtocolVersion,\n  protocolShouldCalculateTaxes,\n  validateCurrencyInput\n} from \"pages/Pool/Positions/create/utils\";\nimport { useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useMultichainContext } from \"state/multichain/useMultichainContext\";\nimport { parseCurrencyFromURLParameter } from \"state/swap/hooks\";\nimport { PositionField } from \"types/position\";\nimport { WRAPPED_NATIVE_CURRENCY, nativeOnChain } from \"uniswap/src/constants/tokens\";\nimport { useUrlContext } from \"uniswap/src/contexts/UrlContext\";\nimport { useGetPoolsByTokens } from \"uniswap/src/data/rest/getPools\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nimport { useSupportedChainId } from \"uniswap/src/features/chains/hooks/useSupportedChainId\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/swap/hooks/useUSDCPrice\";\nimport { getParsedChainId } from \"utils/chainParams\";\nexport function useDerivedPositionInfo(state) {\n  const { chainId } = useMultichainContext();\n  const {\n    currencyInputs: { TOKEN0: token0Input, TOKEN1: token1Input },\n    protocolVersion\n  } = state;\n  const inputCurrencyInfo = useCurrencyInfo(token0Input);\n  const outputCurrencyInfo = useCurrencyInfo(token1Input);\n  const TOKEN0 = inputCurrencyInfo?.currency;\n  const TOKEN1 = outputCurrencyInfo?.currency;\n  const sortedCurrencies = getSortedCurrenciesTuple(TOKEN0, TOKEN1);\n  const validCurrencyInput = validateCurrencyInput(sortedCurrencies);\n  const sortedTokens = getSortedCurrenciesTuple(\n    getCurrencyWithWrap(sortedCurrencies[0], protocolVersion),\n    getCurrencyWithWrap(sortedCurrencies[1], protocolVersion)\n  );\n  const poolsQueryEnabled = poolEnabledProtocolVersion(protocolVersion) && validCurrencyInput;\n  const { data: poolData, isLoading: poolIsLoading } = useGetPoolsByTokens(\n    {\n      fee: state.fee.feeAmount,\n      chainId,\n      protocolVersions: [protocolVersion],\n      token0: getCurrencyAddressWithWrap(sortedCurrencies?.[0], protocolVersion),\n      token1: getCurrencyAddressWithWrap(sortedCurrencies?.[1], protocolVersion),\n      hooks: state.hook?.toLowerCase()\n      // BE does not accept checksummed addresses\n    },\n    poolsQueryEnabled\n  );\n  const pool = poolData?.pools && poolData.pools.length > 0 ? poolData.pools[0] : void 0;\n  const { pairsQueryEnabled } = useMemo(() => {\n    if (!pairEnabledProtocolVersion(protocolVersion)) {\n      return {\n        pairsQueryEnabled: false\n      };\n    }\n    if (!validateCurrencyInput(sortedTokens)) {\n      return {\n        pairsQueryEnabled: false\n      };\n    }\n    return {\n      pairsQueryEnabled: true\n    };\n  }, [protocolVersion, sortedTokens]);\n  const pairResult = useV2Pair(sortedTokens?.[0], sortedTokens?.[1]);\n  const pairIsLoading = pairResult[0] === PairState.LOADING;\n  const pair = pairsQueryEnabled ? pairResult[1] || void 0 : void 0;\n  const v3PoolResult = usePool(sortedTokens?.[0], sortedTokens?.[1], state.fee.feeAmount);\n  const v3Pool = protocolVersion === ProtocolVersion.V3 ? v3PoolResult[1] ?? void 0 : void 0;\n  const v3Price = v3Pool?.token0Price;\n  const { v4Pool, v4Price } = useMemo(() => {\n    const v4Pool2 = protocolVersion === ProtocolVersion.V4 ? getPoolFromRest({\n      pool,\n      token0: sortedCurrencies?.[0],\n      token1: sortedCurrencies?.[1],\n      protocolVersion,\n      hooks: pool?.hooks?.address || \"\"\n    }) : void 0;\n    return { v4Pool: v4Pool2, v4Price: v4Pool2?.token0Price };\n  }, [pool, protocolVersion, sortedCurrencies]);\n  const isPoolOutOfSync = useIsPoolOutOfSync(v4Price || v3Price);\n  const creatingPoolOrPair = useMemo(() => {\n    if (protocolVersion === ProtocolVersion.UNSPECIFIED) {\n      return false;\n    }\n    if (protocolVersion === ProtocolVersion.V2) {\n      return pairResult[0] === PairState.NOT_EXISTS;\n    }\n    if (protocolVersion === ProtocolVersion.V3) {\n      return v3PoolResult[0] === PoolState.NOT_EXISTS;\n    }\n    return poolData?.pools && poolData.pools.length === 0;\n  }, [protocolVersion, poolData?.pools, pairResult, v3PoolResult]);\n  return useMemo(() => {\n    const currencies = [TOKEN0, TOKEN1];\n    if (protocolVersion === ProtocolVersion.UNSPECIFIED) {\n      return {\n        currencies,\n        protocolVersion: ProtocolVersion.V4,\n        isPoolOutOfSync: false\n      };\n    }\n    if (protocolVersion === ProtocolVersion.V2) {\n      return {\n        currencies,\n        protocolVersion,\n        pair,\n        creatingPoolOrPair,\n        poolOrPairLoading: pairIsLoading,\n        isPoolOutOfSync\n      };\n    }\n    if (protocolVersion === ProtocolVersion.V3) {\n      return {\n        currencies,\n        protocolVersion,\n        pool: v3Pool,\n        creatingPoolOrPair,\n        poolOrPairLoading: poolIsLoading,\n        isPoolOutOfSync,\n        poolId: pool?.poolId\n      };\n    }\n    return {\n      currencies,\n      protocolVersion,\n      // V4\n      pool: v4Pool,\n      creatingPoolOrPair,\n      poolOrPairLoading: poolIsLoading,\n      isPoolOutOfSync,\n      poolId: pool?.poolId\n    };\n  }, [\n    TOKEN0,\n    TOKEN1,\n    protocolVersion,\n    v4Pool,\n    creatingPoolOrPair,\n    poolIsLoading,\n    isPoolOutOfSync,\n    pool?.poolId,\n    pair,\n    pairIsLoading,\n    v3Pool\n  ]);\n}\nexport function useDerivedPriceRangeInfo(state) {\n  const { positionState, derivedPositionInfo } = useCreatePositionContext();\n  const { chainId } = useMultichainContext();\n  const shouldUseTaxes = protocolShouldCalculateTaxes(derivedPositionInfo.protocolVersion);\n  const { inputTax: currencyATax, outputTax: currencyBTax } = useSwapTaxes(\n    shouldUseTaxes ? getCurrencyAddressWithWrap(derivedPositionInfo.currencies[0], derivedPositionInfo.protocolVersion) : void 0,\n    shouldUseTaxes ? getCurrencyAddressWithWrap(derivedPositionInfo.currencies[1], derivedPositionInfo.protocolVersion) : void 0,\n    chainId\n  );\n  const priceRangeInfo = useMemo(() => {\n    if (derivedPositionInfo.protocolVersion === ProtocolVersion.V2) {\n      return getV2PriceRangeInfo({ state, derivedPositionInfo });\n    }\n    if (derivedPositionInfo.protocolVersion === ProtocolVersion.V3) {\n      const isTaxed = currencyATax.greaterThan(0) || currencyBTax.greaterThan(0);\n      return getV3PriceRangeInfo({ state, positionState, derivedPositionInfo, isTaxed });\n    }\n    return getV4PriceRangeInfo({ state, positionState, derivedPositionInfo });\n  }, [derivedPositionInfo, state, positionState, currencyATax, currencyBTax]);\n  return priceRangeInfo;\n}\nexport function useDerivedDepositInfo(state) {\n  const account = useAccount();\n  const { derivedPositionInfo } = useCreatePositionContext();\n  const { derivedPriceRangeInfo } = usePriceRangeContext();\n  const { exactAmounts, exactField } = state;\n  const { protocolVersion } = derivedPriceRangeInfo;\n  const depositInfoProps = useMemo(() => {\n    if (protocolVersion === ProtocolVersion.V2) {\n      return {\n        protocolVersion,\n        pair: getPairFromPositionStateAndRangeState({ derivedPositionInfo, derivedPriceRangeInfo }),\n        address: account.address,\n        token0: derivedPositionInfo.currencies[0],\n        token1: derivedPositionInfo.currencies[1],\n        exactField,\n        exactAmounts\n      };\n    }\n    const tickLower = derivedPriceRangeInfo.ticks?.[0];\n    const tickUpper = derivedPriceRangeInfo.ticks?.[1];\n    const { invalidRange, outOfRange, deposit0Disabled, deposit1Disabled } = derivedPriceRangeInfo;\n    if (protocolVersion === ProtocolVersion.V3) {\n      return {\n        protocolVersion,\n        pool: getPoolFromPositionStateAndRangeState({ derivedPositionInfo, derivedPriceRangeInfo }),\n        address: account.address,\n        tickLower,\n        tickUpper,\n        token0: derivedPositionInfo.currencies[0],\n        token1: derivedPositionInfo.currencies[1],\n        exactField,\n        exactAmounts,\n        skipDependentAmount: outOfRange || invalidRange,\n        deposit0Disabled,\n        deposit1Disabled\n      };\n    }\n    return {\n      protocolVersion,\n      pool: getPoolFromPositionStateAndRangeState({ derivedPositionInfo, derivedPriceRangeInfo }),\n      address: account.address,\n      tickLower,\n      tickUpper,\n      token0: derivedPositionInfo.currencies[0],\n      token1: derivedPositionInfo.currencies[1],\n      exactField,\n      exactAmounts,\n      skipDependentAmount: outOfRange || invalidRange,\n      deposit0Disabled,\n      deposit1Disabled\n    };\n  }, [account.address, derivedPositionInfo, derivedPriceRangeInfo, exactAmounts, exactField, protocolVersion]);\n  return useDepositInfo(depositInfoProps);\n}\nexport function useDepositInfo(state) {\n  const account = useAccount();\n  const { protocolVersion, address, token0, token1, exactField, exactAmounts, deposit0Disabled, deposit1Disabled } = state;\n  const [token0Balance, token1Balance] = useCurrencyBalances(address, [token0, token1]);\n  const [independentToken, dependentToken] = exactField === PositionField.TOKEN0 ? [token0, token1] : [token1, token0];\n  const independentAmount = tryParseCurrencyAmount(exactAmounts[exactField], independentToken);\n  const otherAmount = tryParseCurrencyAmount(\n    exactAmounts[exactField === PositionField.TOKEN0 ? PositionField.TOKEN1 : PositionField.TOKEN0],\n    dependentToken\n  );\n  const dependentAmount = useMemo(() => {\n    const shouldSkip = state.skipDependentAmount || protocolVersion === ProtocolVersion.UNSPECIFIED;\n    if (shouldSkip) {\n      return dependentToken && CurrencyAmount.fromRawAmount(dependentToken, 0);\n    }\n    if (protocolVersion === ProtocolVersion.V2) {\n      return getDependentAmountFromV2Pair({\n        independentAmount,\n        otherAmount,\n        pair: state.pair,\n        exactField,\n        token0,\n        token1,\n        dependentToken\n      });\n    }\n    const { tickLower, tickUpper } = state;\n    if (tickLower === void 0 || tickUpper === void 0 || !state.pool || !independentAmount) {\n      return void 0;\n    }\n    const dependentTokenAmount = protocolVersion === ProtocolVersion.V3 ? getDependentAmountFromV3Position({\n      independentAmount,\n      pool: state.pool,\n      tickLower,\n      tickUpper\n    }) : getDependentAmountFromV4Position({\n      independentAmount,\n      pool: state.pool,\n      tickLower,\n      tickUpper\n    });\n    return dependentToken && CurrencyAmount.fromRawAmount(dependentToken, dependentTokenAmount.quotient);\n  }, [state, protocolVersion, independentAmount, otherAmount, dependentToken, exactField, token0, token1]);\n  const independentTokenUSDValue = useUSDCValue(independentAmount) || void 0;\n  const dependentTokenUSDValue = useUSDCValue(dependentAmount) || void 0;\n  const dependentField = exactField === PositionField.TOKEN0 ? PositionField.TOKEN1 : PositionField.TOKEN0;\n  const parsedAmounts = useMemo(() => {\n    return {\n      [PositionField.TOKEN0]: exactField === PositionField.TOKEN0 ? independentAmount : dependentAmount,\n      [PositionField.TOKEN1]: exactField === PositionField.TOKEN0 ? dependentAmount : independentAmount\n    };\n  }, [dependentAmount, independentAmount, exactField]);\n  const { [PositionField.TOKEN0]: currency0Amount, [PositionField.TOKEN1]: currency1Amount } = parsedAmounts;\n  const { t } = useTranslation();\n  const error = useMemo(() => {\n    if (!account.isConnected) {\n      return <ConnectWalletButtonText />;\n    }\n    if (!parsedAmounts[PositionField.TOKEN0] && !deposit0Disabled || !parsedAmounts[PositionField.TOKEN1] && !deposit1Disabled) {\n      return t(\"common.noAmount.error\");\n    }\n    const insufficientToken0Balance = currency0Amount && token0Balance?.lessThan(currency0Amount);\n    const insufficientToken1Balance = currency1Amount && token1Balance?.lessThan(currency1Amount);\n    if (insufficientToken0Balance && insufficientToken1Balance) {\n      return <Trans i18nKey=\"common.insufficientBalance.error\" />;\n    }\n    if (insufficientToken0Balance) {\n      return <Trans\n        i18nKey=\"common.insufficientTokenBalance.error\"\n        values={{\n          tokenSymbol: token0?.symbol\n        }}\n      />;\n    }\n    if (insufficientToken1Balance) {\n      return <Trans\n        i18nKey=\"common.insufficientTokenBalance.error\"\n        values={{\n          tokenSymbol: token1?.symbol\n        }}\n      />;\n    }\n    return void 0;\n  }, [\n    account.isConnected,\n    parsedAmounts,\n    deposit0Disabled,\n    deposit1Disabled,\n    currency0Amount,\n    token0Balance,\n    currency1Amount,\n    token1Balance,\n    t,\n    token0?.symbol,\n    token1?.symbol\n  ]);\n  return useMemo(\n    () => ({\n      currencyBalances: { [PositionField.TOKEN0]: token0Balance, [PositionField.TOKEN1]: token1Balance },\n      formattedAmounts: { [exactField]: exactAmounts[exactField], [dependentField]: dependentAmount?.toExact() },\n      currencyAmounts: { [exactField]: independentAmount, [dependentField]: dependentAmount },\n      currencyAmountsUSDValue: { [exactField]: independentTokenUSDValue, [dependentField]: dependentTokenUSDValue },\n      error\n    }),\n    [\n      token0Balance,\n      token1Balance,\n      exactField,\n      exactAmounts,\n      dependentField,\n      dependentAmount,\n      independentAmount,\n      independentTokenUSDValue,\n      dependentTokenUSDValue,\n      error\n    ]\n  );\n}\nexport function useInitialCurrencyInputs() {\n  const { defaultChainId } = useEnabledChains();\n  const defaultInitialToken = nativeOnChain(defaultChainId);\n  const { useParsedQueryString } = useUrlContext();\n  const parsedQs = useParsedQueryString();\n  const parsedChainId = getParsedChainId(parsedQs);\n  const supportedChainId = useSupportedChainId(parsedChainId) ?? defaultChainId;\n  const { currencyAddressA, currencyAddressB } = useMemo(() => {\n    const currencyAddressA2 = parseCurrencyFromURLParameter(parsedQs.currencyA ?? parsedQs.currencya);\n    const parsedCurrencyAddressB = parseCurrencyFromURLParameter(parsedQs.currencyB ?? parsedQs.currencyb);\n    const currencyAddressB2 = parsedCurrencyAddressB === currencyAddressA2 ? void 0 : parsedCurrencyAddressB;\n    const isETHOrWETHA = checkIsNative(currencyAddressA2) || currencyAddressA2 === WRAPPED_NATIVE_CURRENCY[supportedChainId]?.address;\n    const isETHOrWETHB = checkIsNative(currencyAddressB2) || currencyAddressB2 === WRAPPED_NATIVE_CURRENCY[supportedChainId]?.address;\n    return {\n      currencyAddressA: currencyAddressA2,\n      currencyAddressB: currencyAddressB2 && !(isETHOrWETHA && isETHOrWETHB) ? currencyAddressB2 : void 0\n    };\n  }, [parsedQs.currencyA, parsedQs.currencyB, parsedQs.currencya, parsedQs.currencyb, supportedChainId]);\n  const currencyA = useCurrency(currencyAddressA, supportedChainId);\n  const currencyB = useCurrency(currencyAddressB, supportedChainId);\n  return useMemo(() => {\n    return {\n      [PositionField.TOKEN0]: currencyA ?? currencyB ?? defaultInitialToken,\n      [PositionField.TOKEN1]: currencyA && currencyB ? currencyB : void 0\n    };\n  }, [currencyA, currencyB, defaultInitialToken]);\n}\n","import { Path, Svg } from \"react-native-svg\";\nimport { createIcon } from \"../factories/createIcon\";\nexport const [RotateLeft, AnimatedRotateLeft] = createIcon({\n  name: \"RotateLeft\",\n  getIcon: (props) => <Svg viewBox=\"0 0 16 16\" fill=\"none\" {...props}><Path\n    d=\"M14.6667 8C14.6667 11.676 11.676 14.6667 8.00004 14.6667C5.45204 14.6667 3.16399 13.248 2.02999 10.9634C1.86599 10.6334 2.00077 10.2333 2.33077 10.07C2.65944 9.90532 3.06067 10.0413 3.224 10.3706C4.13133 12.1986 5.96137 13.334 8.00004 13.334C10.9407 13.334 13.3334 10.9413 13.3334 8.00065C13.3334 5.05998 10.9407 2.66732 8.00004 2.66732C6.07537 2.66732 4.33143 3.71065 3.39343 5.33398H5.33337C5.70204 5.33398 6.00004 5.63265 6.00004 6.00065C6.00004 6.36865 5.70204 6.66732 5.33337 6.66732H2.00004C1.63137 6.66732 1.33337 6.36865 1.33337 6.00065V2.66732C1.33337 2.29932 1.63137 2.00065 2.00004 2.00065C2.36871 2.00065 2.66671 2.29932 2.66671 2.66732V4.00602C3.90204 2.35736 5.86471 1.33398 8.00004 1.33398C11.676 1.33332 14.6667 4.324 14.6667 8Z\"\n    fill=\"currentColor\"\n  /></Svg>\n});\n"],"names":["_ref","params","headers","rest","_objectWithoutProperties2","default","_excluded","queryKey","TRADING_API_CACHE_KEY","uniswapUrls","tradingApiPaths","lpApproval","useQuery","Object","assign","queryFn","_asyncToGenerator2","checkLpApproval","skipToken","_reactQuery","require","_urls","_TradingApiClient","inputRegex","RegExp","PercentInput","forwardRef","value","onUserInput","placeholder","testId","ref","locale","useCurrentLocale","valueFormattedWithLocale","value2","searchValue","replaceValue","localeUsesComma","toString","replace","formatValueWithLocale","StyledInput","minLength","maxLength","data-testid","onChange","event","nextUserInput","sanitizedInput","test","enforcer","target","inputMode","autoComplete","autoCorrect","type","pattern","spellCheck","displayName","MemoizedInput","React","StyledPercentInput","styled","$width","NumericalInputFontStyle","PAIR_INTERFACE","Interface","IUniswapV2PairJSON","PairState","PairState2","useV2Pairs","currencies","tokens","useMemo","map","currencyA","currencyB","wrapped","pairAddresses","tokenA","tokenB","chainId","equals","V2_FACTORY_ADDRESSES","computePairAddress","factoryAddress","results","useMultipleContractSingleData","result","i","reserves","loading","reserve0","reserve1","token0","token1","sortsBefore","Pair","CurrencyAmount","fromRawAmount","useV2Pair","TradingAPIError","refetch","t","useTranslation","Flex","row","gap","backgroundColor","borderRadius","p","mb","AlertTriangleFilled","color","size","flexWrap","flexShrink","Text","variant","Boolean","TouchableArea","ClickableTamaguiStyle","onPress","mt","RotateLeft","useDerivedPositionInfo","state","inputCurrencyInfo","outputCurrencyInfo","sortedCurrencies","poolData","sortedTokens","v3Pool","pool","useMultichainContext","currencyInputs","TOKEN0","token0Input","TOKEN1","token1Input","protocolVersion","useCurrencyInfo","currency","getSortedCurrenciesTuple","validCurrencyInput","validateCurrencyInput","getCurrencyWithWrap","poolsQueryEnabled","poolEnabledProtocolVersion","data","isLoading","poolIsLoading","useGetPoolsByTokens","fee","feeAmount","protocolVersions","getCurrencyAddressWithWrap","hooks","hook","toLowerCase","pools","length","pairsQueryEnabled","pairEnabledProtocolVersion","pairResult","pairIsLoading","LOADING","pair","v3PoolResult","usePool","ProtocolVersion","V3","v3Price","token0Price","v4Pool","v4Price","v4Pool2","V4","getPoolFromRest","address","isPoolOutOfSync","useIsPoolOutOfSync","creatingPoolOrPair","UNSPECIFIED","V2","NOT_EXISTS","PoolState","poolOrPairLoading","poolId","useDerivedPriceRangeInfo","positionState","derivedPositionInfo","useCreatePositionContext","shouldUseTaxes","protocolShouldCalculateTaxes","inputTax","currencyATax","outputTax","currencyBTax","useSwapTaxes","getV2PriceRangeInfo","isTaxed","greaterThan","getV3PriceRangeInfo","getV4PriceRangeInfo","useDerivedDepositInfo","account","useAccount","derivedPriceRangeInfo","usePriceRangeContext","exactAmounts","exactField","useDepositInfo","getPairFromPositionStateAndRangeState","tickLower","ticks","tickUpper","invalidRange","outOfRange","deposit0Disabled","deposit1Disabled","getPoolFromPositionStateAndRangeState","skipDependentAmount","token0Balance","token1Balance","useCurrencyBalances","independentToken","dependentToken","PositionField","independentAmount","tryParseCurrencyAmount","otherAmount","dependentAmount","getDependentAmountFromV2Pair","dependentTokenAmount","getDependentAmountFromV3Position","getDependentAmountFromV4Position","quotient","independentTokenUSDValue","useUSDCValue","dependentTokenUSDValue","dependentField","parsedAmounts","currency0Amount","currency1Amount","error","isConnected","ConnectWalletButtonText","insufficientToken0Balance","lessThan","insufficientToken1Balance","Trans","i18nKey","values","tokenSymbol","symbol","currencyBalances","formattedAmounts","toExact","currencyAmounts","currencyAmountsUSDValue","useInitialCurrencyInputs","defaultChainId","useEnabledChains","defaultInitialToken","nativeOnChain","useParsedQueryString","useUrlContext","parsedQs","parsedChainId","getParsedChainId","supportedChainId","useSupportedChainId","currencyAddressA","currencyAddressB","WRAPPED_NATIVE_CURRENCY","currencyAddressA2","parseCurrencyFromURLParameter","currencya","parsedCurrencyAddressB","currencyb","currencyAddressB2","isETHOrWETHA","checkIsNative","isETHOrWETHB","useCurrency","AnimatedRotateLeft","createIcon","name","getIcon","props","Svg","viewBox","fill","Path","d"],"sourceRoot":""}