{"version":3,"file":"static/js/3286.b0ba454c.chunk.js","mappings":"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","sources":["nft/components/bag/BagRow.css.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/ButtonStates.tsx","nft/hooks/usePurchaseAssets.ts","nft/hooks/useTokenInput.ts","nft/utils/buildSellObject.ts","nft/utils/bag.ts","nft/utils/nftRoute.ts","nft/hooks/useFetchAssets.ts","nft/utils/tokenRoutes.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/BagFooter.tsx","graphql/data/nft/NftUniversalRouterAddress.ts","nft/hooks/useSubscribeTransactionState.ts","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/hooks/useSubscribeScrollState.ts","nft/components/bag/Bag.css.ts","nft/components/modals/Overlay.tsx","nft/components/modals/Overlay.css.ts","nft/hooks/useBagTotalEthPrice.ts","nft/hooks/useSendTransaction.ts","nft/hooks/useTransactionResponse.ts","nft/hooks/useUsdPrice.ts","nft/utils/asset.tsx","nft/utils/collection.ts","nft/utils/formatEventProperties.ts","nft/utils/pooledAssets.ts","nft/utils/txRoute/combineItemsWithTxRoute.ts","nft/utils/updatedAssets.ts"],"sourcesContent":["import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtZGVwcmVjYXRlZF9zdGF0ZU92ZXJsYXlIb3Zlcik7Cn0KLl8xa3Vhd2M3IHsKICBmaWx0ZXI6IGdyYXlzY2FsZSgxMDAlKTsKfQouXzFrdWF3YzkgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9Ci5fMWt1YXdjYiB7CiAgbGluZS1oZWlnaHQ6IDI0cHg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetName = '_1kuawcb rgw6ezbf rgw6ezd9 rgw6ez8bh rgw6ez45r rgw6ez45l';\nexport var bagRow = '_1kuawc1 rgw6ez2dr rgw6ez2j9 rgw6ez2of rgw6ez27x rgw6ez4b9 rgw6ez3tf rgw6ez7zd rgw6ez1dr rgw6ez80x';\nexport var bagRowImage = 'rgw6ez149 rgw6ez1b9 rgw6ez49l rgw6ez80p';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3sr rgw6ezbf rgw6ezd9 rgw6ez3xr';\nexport var collectionName = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez8bh rgw6ez45l rgw6ez45r rgw6ez4bf';\nexport var grayscaleImage = '_1kuawc7';\nexport var icon = 'rgw6ez3xr';\nexport var priceChangeColumn = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3t3 rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez5yr rgw6ez1dr rgw6ez7zd';\nexport var priceChangeRow = 'rgw6ezd3 rgw6ezb9 rgw6eze3 rgw6ez4dr rgw6ez3sr';\nexport var unavailableAssetsContainer = 'rgw6ez2p3 rgw6ez28l rgw6ezlf rgw6ezqx rgw6ez4ux rgw6ez3tf rgw6ez4b9 rgw6ez7zp rgw6ez895 rgw6ez59f rgw6ez6df rgw6ez5yr rgw6ez1dr';","\"use strict\";\nimport { Box } from \"components/deprecated/Box\";\nimport styled, { keyframes } from \"lib/styled-components\";\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`;\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accent1};\n`;\nexport const TimedLoader = () => {\n  const stroke = 1.5;\n  return <Box display=\"flex\" position=\"absolute\"><svg height=\"18px\" width=\"18px\"><Circle\n    strokeWidth={`${stroke}`}\n    strokeLinecap=\"round\"\n    style={{\n      transform: \"rotate(90deg)\",\n      transformOrigin: \"50% 50%\"\n    }}\n    fill=\"transparent\"\n    r=\"8px\"\n    cx=\"9px\"\n    cy=\"9px\"\n  /></svg></Box>;\n};\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatEther as ethersFormatEther } from \"@ethersproject/units\";\nimport clsx from \"clsx\";\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from \"components/Button/buttons\";\nimport { Box } from \"components/deprecated/Box\";\nimport styled from \"lib/styled-components\";\nimport { Column, Row } from \"nft/components/Flex\";\nimport * as styles from \"nft/components/bag/BagRow.css\";\nimport { TimedLoader } from \"nft/components/bag/TimedLoader\";\nimport { Suspicious } from \"nft/components/card/icons\";\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon\n} from \"nft/components/icons\";\nimport { bodySmall } from \"nft/css/common.css\";\nimport { loadingBlock } from \"nft/css/loading.css\";\nimport { getAssetHref } from \"nft/utils\";\nimport { useCallback, useEffect, useReducer, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { NumberType, useFormatter } from \"utils/formatNumbers\";\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`;\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`;\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\nexport const RemoveAssetButton = ({ onClick }) => <RemoveAssetOverlay onClick={onClick}><CircularCloseIcon /></RemoveAssetOverlay>;\nconst NoContentContainer = () => <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}><Box\n  position=\"absolute\"\n  textAlign=\"center\"\n  left=\"1/2\"\n  top=\"1/2\"\n  style={{ transform: \"translate3d(-50%, -50%, 0)\" }}\n  color=\"gray500\"\n  fontSize=\"12\"\n  fontWeight=\"book\"\n>\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box></Box>;\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }) => {\n  const { formatEther, formatNumberOrString } = useFormatter();\n  const [loadedImage, setImageLoaded] = useState(false);\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl);\n  const [cardHovered, setCardHovered] = useState(false);\n  const handleMouseEnter = useCallback(() => setCardHovered(true), []);\n  const handleMouseLeave = useCallback(() => setCardHovered(false), []);\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile);\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice;\n  const assetEthPriceFormatted = formatEther({ input: assetEthPrice, type: NumberType.NFTToken });\n  const assetUSDPriceFormatted = formatNumberOrString({\n    input: usdPrice ? parseFloat(ethersFormatEther(assetEthPrice)) * usdPrice : usdPrice,\n    type: NumberType.FiatNFTToken\n  });\n  const handleRemoveClick = useCallback(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      removeAsset([asset]);\n    },\n    [asset, removeAsset]\n  );\n  return <Link to={getAssetHref(asset)} style={{ textDecoration: \"none\" }}><Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}><Box position=\"relative\" display=\"flex\">{showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}{!noImageAvailable && <Box\n    as=\"img\"\n    src={asset.smallImageUrl}\n    alt={asset.name}\n    className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n    onLoad={() => {\n      setImageLoaded(true);\n    }}\n    onError={() => {\n      setNoImageAvailable(true);\n    }}\n    visibility={loadedImage ? \"visible\" : \"hidden\"}\n  />}{!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}{noImageAvailable && <NoContentContainer />}</Box><Column overflow=\"hidden\" width=\"full\" color={grayscale ? \"neutral2\" : \"neutral1\"}><Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\"><Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>{asset.susFlag && <Suspicious />}</Row><Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\"><Box className={styles.collectionName}>{asset.collectionName}</Box>{asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}</Row></Column>{showRemoveButton && <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>}{(!showRemoveButton || isMobile) && <Column flexShrink=\"0\" alignItems=\"flex-end\"><Box className={styles.bagRowPrice}>{assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box><Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box></Column>}</Row></Link>;\n};\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }) => {\n  const { formatEther } = useFormatter();\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice));\n  const handleRemove = useCallback(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const toKeep = false;\n      markAssetAsReviewed(asset, toKeep);\n    },\n    [asset, markAssetAsReviewed]\n  );\n  const handleKeep = useCallback(\n    (e) => {\n      e.preventDefault();\n      e.stopPropagation();\n      const toKeep = true;\n      markAssetAsReviewed(asset, toKeep);\n    },\n    [asset, markAssetAsReviewed]\n  );\n  return <Column className={styles.priceChangeColumn} borderTopColor={top ? \"surface3\" : \"transparent\"}><Row className={styles.priceChangeRow}>{isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}<Box>{`Price ${isPriceIncrease ? \"increased\" : \"decreased\"} from ${formatEther({\n    input: asset.priceInfo.ETHPrice,\n    type: NumberType.NFTToken\n  })} ETH`}</Box></Row><Box style={{ marginLeft: \"-8px\", marginRight: \"-8px\" }}><BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => void 0} isMobile={isMobile} /></Box><Row gap=\"8\" justifyContent=\"space-between\"><ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton><ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton></Row></Column>;\n};\nconst ASSET_PREVIEW_WIDTH = 32;\nconst ASSET_PREVIEW_OFFSET = 20;\nconst UnavailableAssetsPreview = ({ assets }) => <Column\n  display=\"grid\"\n  style={{\n    gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n    width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`\n  }}\n>{assets.map((asset, index) => <Box\n  key={`${asset.address}-${asset.tokenId}`}\n  as=\"img\"\n  src={asset.smallImageUrl}\n  width=\"32\"\n  height=\"32\"\n  borderStyle=\"solid\"\n  borderWidth=\"1px\"\n  borderColor=\"surface1\"\n  borderRadius=\"4\"\n  style={{ zIndex: index }}\n  className={styles.grayscaleImage}\n/>)}</Column>;\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile\n}) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false);\n  const timerLimit = 8;\n  const [timeLeft, setTimeLeft] = useState(timerLimit);\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets();\n        setDidOpenUnavailableAssets(false);\n      }\n      return void 0;\n    }\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1e3);\n    return () => clearInterval(intervalId);\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets]);\n  if (!assets || assets.length === 0) {\n    return null;\n  }\n  const moreThanOneUnavailable = assets.length > 1;\n  const isShowingAssets = isOpen || !moreThanOneUnavailable;\n  return <Column className={styles.unavailableAssetsContainer}><Column><Row\n    justifyContent=\"space-between\"\n    marginBottom={isShowingAssets ? \"12\" : \"0\"}\n    cursor={moreThanOneUnavailable ? \"pointer\" : \"default\"}\n    onClick={() => {\n      if (moreThanOneUnavailable) {\n        !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true);\n        toggleOpen();\n      }\n    }}\n  ><Row gap=\"12\" color=\"neutral2\" className={bodySmall}>{!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>{moreThanOneUnavailable && <Row color=\"neutral2\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>}{!didOpenUnavailableAssets && <Row\n    position=\"relative\"\n    width=\"20\"\n    height=\"20\"\n    color=\"neutral1\"\n    justifyContent=\"center\"\n    cursor=\"pointer\"\n    onClick={clearUnavailableAssets}\n  ><TimedLoader /><CloseTimerIcon /></Row>}</Row><Column gap=\"8\" style={{ marginLeft: \"-8px\", marginRight: \"-8px\" }}>{isShowingAssets && assets.map((asset) => <BagRow\n    key={asset.id}\n    asset={asset}\n    usdPrice={usdPrice}\n    removeAsset={() => void 0}\n    grayscale\n    isMobile={isMobile}\n  />)}</Column></Column></Column>;\n};\n","\"use strict\";\nimport { NFTEventName } from \"@uniswap/analytics-events\";\nimport { useIsMobile } from \"hooks/screenSize/useIsMobile\";\nimport { Column } from \"nft/components/Flex\";\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from \"nft/components/bag/BagRow\";\nimport { useBag, useNativeUsdPrice } from \"nft/hooks\";\nimport { BagItemStatus, BagStatus } from \"nft/types\";\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from \"nft/utils\";\nimport { useEffect, useMemo } from \"react\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus);\n  const setBagStatus = useBag((s) => s.setBagStatus);\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed);\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets);\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets);\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag);\n  const setItemsInBag = useBag((s) => s.setItemsInBag);\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag);\n  const isMobile = useIsMobile();\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag);\n  }, [uncheckedItemsInBag]);\n  const ethUsdPrice = useNativeUsdPrice();\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets2 = itemsInBag.filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED).map((item) => item.asset);\n    const priceChangedAssets2 = itemsInBag.filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE).map((item) => item.asset);\n    const unavailableAssets2 = itemsInBag.filter((item) => item.status === BagItemStatus.UNAVAILABLE).map((item) => item.asset);\n    const availableItems2 = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE);\n    return { unchangedAssets: unchangedAssets2, priceChangedAssets: priceChangedAssets2, unavailableAssets: unavailableAssets2, availableItems: availableItems2 };\n  }, [itemsInBag]);\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0;\n    const hasAssets = itemsInBag.length > 0;\n    if (hasAssetsInReview) {\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: ethUsdPrice,\n        bag_quantity: itemsInBag.length,\n        ...formatAssetEventProperties(priceChangedAssets)\n      });\n    }\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) {\n        setBagStatus(BagStatus.CONFIRM_REVIEW);\n      } else {\n        setBagStatus(BagStatus.ADDING_TO_BAG);\n      }\n    }\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG);\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, ethUsdPrice]);\n  return <><Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? \"flex\" : \"none\"}>{unavailableAssets.length > 0 && <Trace\n    logImpression\n    eventOnTrigger={NFTEventName.NFT_BUY_BAG_CHANGED}\n    properties={{\n      usd_value: ethUsdPrice,\n      bag_quantity: itemsInBag.length,\n      ...formatAssetEventProperties(unavailableAssets)\n    }}\n  ><UnavailableAssetsHeaderRow\n    assets={unavailableAssets}\n    usdPrice={ethUsdPrice}\n    clearUnavailableAssets={() => setItemsInBag(availableItems)}\n    didOpenUnavailableAssets={didOpenUnavailableAssets}\n    setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n    isMobile={isMobile}\n  /></Trace>}{priceChangedAssets.map((asset, index) => <PriceChangeBagRow\n    key={asset.id}\n    asset={asset}\n    usdPrice={ethUsdPrice}\n    markAssetAsReviewed={markAssetAsReviewed}\n    top={index === 0 && unavailableAssets.length === 0}\n    isMobile={isMobile}\n  />)}</Column><Column>{unchangedAssets.slice(0).reverse().map((asset) => <BagRow\n    key={asset.id}\n    asset={asset}\n    usdPrice={ethUsdPrice}\n    removeAsset={removeAssetsFromBag}\n    showRemove={true}\n    isMobile={isMobile}\n  />)}</Column></>;\n};\n","\"use strict\";\nimport { ConnectWalletButtonText } from \"components/NavBar/accountCTAsExperimentUtils\";\nimport { Trans } from \"react-i18next\";\nexport var BuyButtonStates = /* @__PURE__ */ ((BuyButtonStates2) => {\n  BuyButtonStates2[BuyButtonStates2[\"WALLET_NOT_CONNECTED\"] = 0] = \"WALLET_NOT_CONNECTED\";\n  BuyButtonStates2[BuyButtonStates2[\"NOT_SUPPORTED_CHAIN\"] = 1] = \"NOT_SUPPORTED_CHAIN\";\n  BuyButtonStates2[BuyButtonStates2[\"INSUFFICIENT_BALANCE\"] = 2] = \"INSUFFICIENT_BALANCE\";\n  BuyButtonStates2[BuyButtonStates2[\"ERROR\"] = 3] = \"ERROR\";\n  BuyButtonStates2[BuyButtonStates2[\"IN_WALLET_CONFIRMATION\"] = 4] = \"IN_WALLET_CONFIRMATION\";\n  BuyButtonStates2[BuyButtonStates2[\"PROCESSING_TRANSACTION\"] = 5] = \"PROCESSING_TRANSACTION\";\n  BuyButtonStates2[BuyButtonStates2[\"FETCHING_TOKEN_ROUTE\"] = 6] = \"FETCHING_TOKEN_ROUTE\";\n  BuyButtonStates2[BuyButtonStates2[\"INVALID_TOKEN_ROUTE\"] = 7] = \"INVALID_TOKEN_ROUTE\";\n  BuyButtonStates2[BuyButtonStates2[\"NO_TOKEN_ROUTE_FOUND\"] = 8] = \"NO_TOKEN_ROUTE_FOUND\";\n  BuyButtonStates2[BuyButtonStates2[\"LOADING_ALLOWANCE\"] = 9] = \"LOADING_ALLOWANCE\";\n  BuyButtonStates2[BuyButtonStates2[\"IN_WALLET_ALLOWANCE_APPROVAL\"] = 10] = \"IN_WALLET_ALLOWANCE_APPROVAL\";\n  BuyButtonStates2[BuyButtonStates2[\"PROCESSING_APPROVAL\"] = 11] = \"PROCESSING_APPROVAL\";\n  BuyButtonStates2[BuyButtonStates2[\"REQUIRE_APPROVAL\"] = 12] = \"REQUIRE_APPROVAL\";\n  BuyButtonStates2[BuyButtonStates2[\"CONFIRM_UPDATED_PRICE\"] = 13] = \"CONFIRM_UPDATED_PRICE\";\n  BuyButtonStates2[BuyButtonStates2[\"PRICE_IMPACT_HIGH\"] = 14] = \"PRICE_IMPACT_HIGH\";\n  BuyButtonStates2[BuyButtonStates2[\"PAY\"] = 15] = \"PAY\";\n  return BuyButtonStates2;\n})(BuyButtonStates || {});\nexport function getBuyButtonStateData(buyButtonState, theme, handleClickOverride, usingPayWithAnyToken, priceImpact) {\n  const defaultBuyButtonState = {\n    handleClick: () => void 0,\n    buttonText: <Trans i18nKey=\"common.card.error.description\" />,\n    disabled: true,\n    warningText: void 0,\n    warningTextColor: theme.deprecated_accentWarning,\n    helperText: void 0,\n    helperTextColor: theme.neutral2,\n    buttonColor: theme.accent1,\n    buttonTextColor: theme.deprecated_accentTextLightPrimary\n  };\n  const buyButtonStateData = {\n    [0 /* WALLET_NOT_CONNECTED */]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => void 0),\n      disabled: false,\n      buttonText: <ConnectWalletButtonText />\n    },\n    [1 /* NOT_SUPPORTED_CHAIN */]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => void 0),\n      buttonText: <Trans i18nKey=\"common.switchNetworks\" />,\n      disabled: false,\n      warningText: <Trans i18nKey=\"common.wrongNetwork\" />\n    },\n    [2 /* INSUFFICIENT_BALANCE */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.pay.button\" />,\n      warningText: <Trans i18nKey=\"common.insufficient.funds\" />\n    },\n    [3 /* ERROR */]: {\n      ...defaultBuyButtonState,\n      warningText: <Trans i18nKey=\"common.error.wrong.tryAgain\" />\n    },\n    [4 /* IN_WALLET_CONFIRMATION */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.proceedInWallet.short\" />\n    },\n    [5 /* PROCESSING_TRANSACTION */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.transactionPending\" />\n    },\n    [6 /* FETCHING_TOKEN_ROUTE */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.fetchingRoute\" />\n    },\n    [7 /* INVALID_TOKEN_ROUTE */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.pay.button\" />\n    },\n    [8 /* NO_TOKEN_ROUTE_FOUND */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.insufficientLiquidity\" />,\n      buttonColor: theme.surface3,\n      buttonTextColor: theme.neutral1,\n      helperText: <Trans i18nKey=\"transaction.insufficientLiquidity\" />\n    },\n    [9 /* LOADING_ALLOWANCE */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"common.loadingAllowance\" />\n    },\n    [10 /* IN_WALLET_ALLOWANCE_APPROVAL */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"swap.approveInWallet\" />\n    },\n    [11 /* PROCESSING_APPROVAL */]: {\n      ...defaultBuyButtonState,\n      buttonText: <Trans i18nKey=\"swap.approvalPending\" />\n    },\n    [12 /* REQUIRE_APPROVAL */]: {\n      ...defaultBuyButtonState,\n      disabled: false,\n      handleClick: handleClickOverride ?? (() => void 0),\n      helperText: <Trans i18nKey=\"swap.approvalNeeded\" />,\n      buttonText: <Trans i18nKey=\"common.approve\" />\n    },\n    [13 /* CONFIRM_UPDATED_PRICE */]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => void 0),\n      disabled: false,\n      warningTextColor: theme.accent1,\n      warningText: <Trans i18nKey=\"common.priceUpdated\" />,\n      buttonText: <Trans i18nKey=\"common.pay.button\" />\n    },\n    [14 /* PRICE_IMPACT_HIGH */]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => void 0),\n      disabled: false,\n      buttonColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.buttonColor,\n      helperText: <Trans i18nKey=\"common.priceImpact\" />,\n      helperTextColor: priceImpact ? priceImpact.priceImpactSeverity.color : defaultBuyButtonState.helperTextColor,\n      buttonText: <Trans i18nKey=\"swap.payAnyway\" />\n    },\n    [15 /* PAY */]: {\n      ...defaultBuyButtonState,\n      handleClick: handleClickOverride ?? (() => void 0),\n      disabled: false,\n      buttonText: <Trans i18nKey=\"common.pay.button\" />,\n      helperText: usingPayWithAnyToken ? <Trans i18nKey=\"nft.refundsInEth\" /> : void 0\n    }\n  };\n  return buyButtonStateData[buyButtonState];\n}\n","\"use strict\";\nimport { useEthersSigner } from \"hooks/useEthersSigner\";\nimport { useBag } from \"nft/hooks/useBag\";\nimport { useSendTransaction } from \"nft/hooks/useSendTransaction\";\nimport { useTransactionResponse } from \"nft/hooks/useTransactionResponse\";\nimport { useCallback } from \"react\";\nexport function usePurchaseAssets() {\n  const signer = useEthersSigner();\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction);\n  const setTransactionResponse = useTransactionResponse((state) => state.setTransactionResponse);\n  const {\n    setLocked: setBagLocked,\n    setBagExpanded,\n    reset: resetBag\n  } = useBag(({ setLocked, setBagExpanded: setBagExpanded2, reset }) => ({\n    setLocked,\n    setBagExpanded: setBagExpanded2,\n    reset\n  }));\n  return useCallback(\n    async (routingData, assetsToBuy, purchasingWithErc20 = false) => {\n      if (!signer) {\n        return;\n      }\n      const purchaseResponse = await sendTransaction(signer, assetsToBuy, routingData, purchasingWithErc20);\n      if (purchaseResponse) {\n        setBagLocked(false);\n        setTransactionResponse(purchaseResponse);\n        setBagExpanded({ bagExpanded: false });\n        resetBag();\n      }\n    },\n    [signer, resetBag, sendTransaction, setBagExpanded, setBagLocked, setTransactionResponse]\n  );\n}\n","\"use strict\";\nimport { devtools } from \"zustand/middleware\";\nimport { shallow } from \"zustand/shallow\";\nimport { createWithEqualityFn } from \"zustand/traditional\";\nexport const useTokenInput = createWithEqualityFn()(\n  devtools(\n    (set) => ({\n      inputCurrency: void 0,\n      tokenTradeInput: void 0,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: void 0 })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput }))\n    }),\n    { name: \"useTokenInput\" }\n  ),\n  shallow\n);\n","\"use strict\";\nimport { BagItemStatus } from \"nft/types\";\nexport const buildNftTradeInputFromBagItems = (itemsInBag) => {\n  const assetsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset);\n  return buildNftTradeInput(assetsToBuy);\n};\nconst buildNftTradeInput = (assets) => {\n  return assets.flatMap((asset) => {\n    const { id, address, marketplace, priceInfo, tokenId, tokenType } = asset;\n    if (!id || !marketplace) {\n      return [];\n    }\n    const ethAmountInput = {\n      amount: priceInfo.ETHPrice,\n      token: {\n        address: \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\",\n        chainId: 1,\n        decimals: 18,\n        isNative: true\n      }\n    };\n    return [\n      {\n        amount: 1,\n        contractAddress: address,\n        id,\n        marketplace: marketplace.toUpperCase(),\n        quotePrice: ethAmountInput,\n        tokenId,\n        tokenType\n      }\n    ];\n  });\n};\n","\"use strict\";\nimport { BagItemStatus, BagStatus } from \"nft/types\";\nimport { compareAssetsWithTransactionRoute } from \"nft/utils/txRoute/combineItemsWithTxRoute\";\nimport { filterUpdatedAssetsByState } from \"nft/utils/updatedAssets\";\nexport function getPurchasableAssets(itemsInBag) {\n  return itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset);\n}\nfunction createBagFromUpdatedAssets(unavailable, priceChanged, unchanged) {\n  return [\n    ...unavailable.map((unavailableAsset) => ({\n      asset: unavailableAsset,\n      status: BagItemStatus.UNAVAILABLE\n    })),\n    ...priceChanged.map((changedAsset) => ({\n      asset: changedAsset,\n      status: BagItemStatus.REVIEWING_PRICE_CHANGE\n    })),\n    ...unchanged.map((unchangedAsset) => ({\n      asset: unchangedAsset,\n      status: BagItemStatus.REVIEWED\n    }))\n  ];\n}\nfunction evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata) {\n  if (!hasAssets) {\n    return BagStatus.ADDING_TO_BAG;\n  }\n  if (shouldReview) {\n    if (hasAssetsInReview) {\n      return BagStatus.IN_REVIEW;\n    }\n    return BagStatus.CONFIRM_REVIEW;\n  }\n  if (shouldRefetchCalldata) {\n    return BagStatus.CONFIRM_QUOTE;\n  }\n  return BagStatus.CONFIRMING_IN_WALLET;\n}\nexport function getNextBagState(wishAssetsToBuy, route, purchasingWithErc20) {\n  const { hasPriceAdjustment, updatedAssets } = compareAssetsWithTransactionRoute(wishAssetsToBuy, route);\n  const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20;\n  const { unchanged, priceChanged, unavailable } = filterUpdatedAssetsByState(updatedAssets);\n  const hasAssets = updatedAssets.length > 0;\n  const hasAssetsInReview = priceChanged.length > 0;\n  const hasUnavailableAssets = unavailable.length > 0;\n  const shouldReview = hasAssetsInReview || hasUnavailableAssets;\n  const newBagItems = createBagFromUpdatedAssets(unavailable, priceChanged, unchanged);\n  const nextBagStatus = evaluateNextBagState(hasAssets, shouldReview, hasAssetsInReview, shouldRefetchCalldata);\n  return { newBagItems, nextBagStatus };\n}\n","\"use strict\";\nimport { RoutingActions } from \"nft/types\";\nfunction buildRoutingItem(routingItem) {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: \"18\"\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: \"18\"\n      },\n      tokenType: routingItem.tokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase(),\n      orderSource: \"api\"\n    }\n  };\n}\nfunction buildRoutingItems(routingItems) {\n  return routingItems.map(buildRoutingItem);\n}\nexport function buildRouteResponse(routeResponse, useErc20Token) {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : [];\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? void 0 : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress\n    }\n  };\n}\n","\"use strict\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useBag } from \"nft/hooks/useBag\";\nimport { usePurchaseAssets } from \"nft/hooks/usePurchaseAssets\";\nimport { useTokenInput } from \"nft/hooks/useTokenInput\";\nimport { BagStatus } from \"nft/types\";\nimport { buildNftTradeInputFromBagItems, recalculateBagUsingPooledAssets } from \"nft/utils\";\nimport { getNextBagState, getPurchasableAssets } from \"nft/utils/bag\";\nimport { buildRouteResponse } from \"nft/utils/nftRoute\";\nimport { useCallback, useMemo } from \"react\";\nimport { useNftRouteLazyQuery } from \"uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks\";\nexport function useFetchAssets() {\n  const account = useAccount();\n  const {\n    itemsInBag: uncheckedItemsInBag,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    isLocked: bagIsLocked,\n    setLocked: setBagLocked,\n    setItemsInBag\n  } = useBag(\n    ({\n      itemsInBag: itemsInBag2,\n      setBagStatus: setBagStatus2,\n      didOpenUnavailableAssets: didOpenUnavailableAssets2,\n      setDidOpenUnavailableAssets: setDidOpenUnavailableAssets2,\n      isLocked,\n      setLocked,\n      setItemsInBag: setItemsInBag2\n    }) => ({\n      itemsInBag: itemsInBag2,\n      setBagStatus: setBagStatus2,\n      didOpenUnavailableAssets: didOpenUnavailableAssets2,\n      setDidOpenUnavailableAssets: setDidOpenUnavailableAssets2,\n      isLocked,\n      setLocked,\n      setItemsInBag: setItemsInBag2\n    })\n  );\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput);\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag]);\n  const [fetchGqlRoute] = useNftRouteLazyQuery();\n  const purchaseAssets = usePurchaseAssets();\n  const resetStateBeforeFetch = useCallback(() => {\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false);\n    !bagIsLocked && setBagLocked(true);\n    setBagStatus(BagStatus.FETCHING_ROUTE);\n  }, [bagIsLocked, didOpenUnavailableAssets, setBagLocked, setBagStatus, setDidOpenUnavailableAssets]);\n  return useCallback(async () => {\n    resetStateBeforeFetch();\n    fetchGqlRoute({\n      variables: {\n        senderAddress: account.address ? account.address : \"\",\n        nftTrades: buildNftTradeInputFromBagItems(itemsInBag),\n        tokenTrades: tokenTradeInput ? tokenTradeInput : void 0\n      },\n      onCompleted: (data) => {\n        if (!data.nftRoute || !data.nftRoute.route) {\n          setBagStatus(BagStatus.ADDING_TO_BAG);\n          setBagLocked(false);\n          return;\n        }\n        const wishAssetsToBuy = getPurchasableAssets(itemsInBag);\n        const purchasingWithErc20 = !!tokenTradeInput;\n        const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20);\n        const { newBagItems, nextBagStatus } = getNextBagState(wishAssetsToBuy, route, purchasingWithErc20);\n        setItemsInBag(newBagItems);\n        setBagStatus(nextBagStatus);\n        if (nextBagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n          purchaseAssets(routeResponse, wishAssetsToBuy, purchasingWithErc20);\n          setBagLocked(true);\n          return;\n        }\n        setBagLocked(false);\n      }\n    });\n  }, [\n    account.address,\n    fetchGqlRoute,\n    itemsInBag,\n    purchaseAssets,\n    resetStateBeforeFetch,\n    setBagLocked,\n    setBagStatus,\n    setItemsInBag,\n    tokenTradeInput\n  ]);\n}\n","\"use strict\";\nimport { Protocol } from \"@uniswap/router-sdk\";\nimport { DEFAULT_NATIVE_ADDRESS, getChainInfo } from \"uniswap/src/features/chains/chainInfo\";\nimport { isUniverseChainId } from \"uniswap/src/features/chains/types\";\nfunction buildTradeRouteInputAmounts(swapAmounts) {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken ? swapAmounts.inputAmount.currency.address : DEFAULT_NATIVE_ADDRESS,\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative\n      }\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken ? swapAmounts.outputAmount.currency.address : DEFAULT_NATIVE_ADDRESS,\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative\n      }\n    }\n  };\n}\nfunction buildPool(pool) {\n  const isPool = \"fee\" in pool;\n  const knownChainId = isUniverseChainId(pool.chainId);\n  const nativeCurrencyAddress = knownChainId ? getChainInfo(pool.chainId).nativeCurrency.address : DEFAULT_NATIVE_ADDRESS;\n  return {\n    pair: !isPool ? {\n      tokenAmountA: {\n        amount: pool.reserve0.quotient.toString(),\n        token: {\n          address: pool.token0.address,\n          chainId: pool.token0.chainId,\n          decimals: pool.token0.decimals,\n          isNative: pool.token0.isNative\n        }\n      },\n      tokenAmountB: {\n        amount: pool.reserve1.quotient.toString(),\n        token: {\n          address: pool.token1.address,\n          chainId: pool.token1.chainId,\n          decimals: pool.token1.decimals,\n          isNative: pool.token1.isNative\n        }\n      }\n    } : void 0,\n    pool: isPool ? {\n      fee: pool.fee,\n      liquidity: pool.liquidity.toString(),\n      sqrtRatioX96: pool.sqrtRatioX96.toString(),\n      tickCurrent: pool.tickCurrent.toString(),\n      tokenA: {\n        address: \"address\" in pool.token0 ? pool.token0.address : nativeCurrencyAddress,\n        chainId: pool.token0.chainId,\n        decimals: pool.token0.decimals,\n        isNative: pool.token0.isNative\n      },\n      tokenB: {\n        address: \"address\" in pool.token1 ? pool.token1.address : nativeCurrencyAddress,\n        chainId: pool.token1.chainId,\n        decimals: pool.token1.decimals,\n        isNative: pool.token1.isNative\n      }\n    } : void 0\n  };\n}\nfunction buildPools(pools) {\n  return pools.map((pool) => buildPool(pool));\n}\nfunction buildTradeRouteInput(swap) {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools)\n  };\n}\nexport function buildAllTradeRouteInputs(trade) {\n  const mixedTokenTradeRouteInputs = [];\n  const v2TokenTradeRouteInputs = [];\n  const v3TokenTradeRouteInputs = [];\n  const swaps = trade.swaps;\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap));\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap));\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap));\n    }\n  }\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : void 0,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : void 0,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : void 0\n  };\n}\n","\"use strict\";\nimport { useTokenInput } from \"nft/hooks/useTokenInput\";\nimport { buildAllTradeRouteInputs } from \"nft/utils/tokenRoutes\";\nimport { useEffect } from \"react\";\nimport { isClassicTrade } from \"state/routing/utils\";\nimport {\n  TokenTradeType\n} from \"uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks\";\nexport default function usePayWithAnyTokenSwap(trade, allowance, allowedSlippage) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput);\n  const hasRoutes = isClassicTrade(trade) && trade.routes;\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken;\n  const hasAllowance = !!allowedSlippage && !!allowance;\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(void 0);\n      return;\n    }\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2));\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } = buildAllTradeRouteInputs(trade);\n    const routes = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs\n    };\n    const permitInput = \"permitSignature\" in allowance && allowance.permitSignature ? {\n      details: {\n        amount: allowance.permitSignature.details.amount.toString(),\n        expiration: allowance.permitSignature.details.expiration.toString(),\n        nonce: allowance.permitSignature.details.nonce.toString(),\n        token: allowance.permitSignature.details.token\n      },\n      sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n      signature: allowance.permitSignature.signature,\n      spender: allowance.permitSignature.spender\n    } : void 0;\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative\n        }\n      }\n    });\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade]);\n}\n","\"use strict\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { InterfaceElementName, NFTEventName } from \"@uniswap/analytics-events\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { useAccountDrawer } from \"components/AccountDrawer/MiniPortfolio/hooks\";\nimport Loader from \"components/Icons/LoadingSpinner\";\nimport CurrencyLogo from \"components/Logo/CurrencyLogo\";\nimport CurrencySearchModal from \"components/SearchModal/CurrencySearchModal\";\nimport { LoadingBubble } from \"components/Tokens/loading\";\nimport { MouseoverTooltip } from \"components/Tooltip\";\nimport Column from \"components/deprecated/Column\";\nimport Row from \"components/deprecated/Row\";\nimport { NATIVE_CHAIN_ID } from \"constants/tokens\";\nimport { getURAddress, useNftUniversalRouterAddress } from \"graphql/data/nft/NftUniversalRouterAddress\";\nimport { useCurrency } from \"hooks/Tokens\";\nimport { useAccount } from \"hooks/useAccount\";\nimport usePermit2Allowance, { AllowanceState } from \"hooks/usePermit2Allowance\";\nimport { useSwitchChain } from \"hooks/useSwitchChain\";\nimport JSBI from \"jsbi\";\nimport useCurrencyBalance, { useTokenBalance } from \"lib/hooks/useCurrencyBalance\";\nimport styled, { useTheme } from \"lib/styled-components\";\nimport tryParseCurrencyAmount from \"lib/utils/tryParseCurrencyAmount\";\nimport { BuyButtonStates, getBuyButtonStateData } from \"nft/components/bag/ButtonStates\";\nimport { useBag } from \"nft/hooks/useBag\";\nimport { useBagTotalEthPrice } from \"nft/hooks/useBagTotalEthPrice\";\nimport useDerivedPayWithAnyTokenSwapInfo from \"nft/hooks/useDerivedPayWithAnyTokenSwapInfo\";\nimport { useFetchAssets } from \"nft/hooks/useFetchAssets\";\nimport usePayWithAnyTokenSwap from \"nft/hooks/usePayWithAnyTokenSwap\";\nimport { usePriceImpact } from \"nft/hooks/usePriceImpact\";\nimport { useSubscribeTransactionState } from \"nft/hooks/useSubscribeTransactionState\";\nimport { useTokenInput } from \"nft/hooks/useTokenInput\";\nimport { BagStatus } from \"nft/types\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { AlertTriangle, ChevronDown } from \"react-feather\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { TradeFillType, TradeState } from \"state/routing/types\";\nimport { ThemedText } from \"theme/components\";\nimport { useIsSupportedChainId } from \"uniswap/src/features/chains/hooks/useSupportedChainId\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/swap/hooks/useUSDCPrice\";\nimport { NumberType, useFormatter } from \"utils/formatNumbers\";\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`;\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.surface3};\n  color: ${({ theme }) => theme.neutral1};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`;\nconst FooterHeader = styled(Column)`\n  padding-top: 8px;\n  padding-bottom: 16px;\n`;\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`;\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow: hidden;\n`;\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`;\nconst WarningText = styled(ThemedText.BodyPrimary)`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`;\nconst HelperText = styled(ThemedText.BodySmall)`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`;\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`;\nconst ActionButton = styled.button`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 535;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`;\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`;\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`;\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`;\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 535;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`;\nconst Warning = ({ color, children }) => {\n  if (!children) {\n    return null;\n  }\n  return <WarningText data-testid=\"nft-buy-button-warning\" fontSize=\"14px\" lineHeight=\"20px\" $color={color}><WarningIcon />{children}</WarningText>;\n};\nconst Helper = ({ children, color }) => {\n  if (!children) {\n    return null;\n  }\n  return <HelperText lineHeight=\"16px\" $color={color}>{children}</HelperText>;\n};\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade\n}) => {\n  const { formatEther: formatEther2, formatNumberOrString } = useFormatter();\n  if (!usingPayWithAnyToken) {\n    return <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"535\">{formatEther2({ input: totalEthPrice.toString(), type: NumberType.NFTToken })}\n        &nbsp;{activeCurrency?.symbol ?? \"ETH\"}</ThemedText.BodyPrimary>;\n  }\n  if (tradeState === TradeState.LOADING && !trade) {\n    return <ThemedText.BodyPrimary color=\"neutral3\" lineHeight=\"20px\" fontWeight=\"535\"><Trans i18nKey=\"swap.fetchingPrice\" /></ThemedText.BodyPrimary>;\n  }\n  return <ValueText color={tradeState === TradeState.LOADING ? \"neutral3\" : \"neutral1\"}>{formatNumberOrString({ input: trade?.inputAmount.toExact(), type: NumberType.NFTToken })}</ValueText>;\n};\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken\n}) => {\n  const { t } = useTranslation();\n  const { formatNumberOrString } = useFormatter();\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null;\n    }\n    return <FiatLoadingBubble />;\n  }\n  return <PriceImpactContainer>{priceImpact && <><MouseoverTooltip text={t(\"swap.estimatedDifference.label\")}><PriceImpactRow><AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" /><ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                ({priceImpact.displayPercentage()})\n              </ThemedText.BodySmall></PriceImpactRow></MouseoverTooltip></>}<ThemedText.BodySmall color=\"neutral3\" lineHeight=\"20px\">{`${formatNumberOrString({ input: usdcValue?.toExact(), type: NumberType.FiatNFTToken })}`}</ThemedText.BodySmall></PriceImpactContainer>;\n};\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION\n];\nexport const BagFooter = ({ setModalIsOpen, eventProperties }) => {\n  const accountDrawer = useAccountDrawer();\n  const theme = useTheme();\n  const account = useAccount();\n  const isSupportedChain = useIsSupportedChainId(account.chainId);\n  const connected = account.isConnected && account.chainId;\n  const totalEthPrice = useBagTotalEthPrice();\n  const { inputCurrency } = useTokenInput(({ inputCurrency: inputCurrency2 }) => ({ inputCurrency: inputCurrency2 }));\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency);\n  const defaultCurrency = useCurrency(\"ETH\");\n  const inputCurrencyBalance = useTokenBalance(\n    account.address,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : void 0\n  );\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus\n  } = useBag(({ isLocked, bagStatus: bagStatus2, setBagExpanded: setBagExpanded2, setBagStatus: setBagStatus2 }) => ({\n    isLocked,\n    bagStatus: bagStatus2,\n    setBagExpanded: setBagExpanded2,\n    setBagStatus: setBagStatus2\n  }));\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false);\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus);\n  const activeCurrency = inputCurrency ?? defaultCurrency;\n  const usingPayWithAnyToken = !!inputCurrency && account.chainId === UniverseChainId.Mainnet;\n  const { universalRouterAddress, universalRouterAddressIsLoading } = useNftUniversalRouterAddress();\n  useSubscribeTransactionState(setModalIsOpen);\n  const fetchAssets = useFetchAssets();\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? void 0);\n  }, [defaultCurrency, totalEthPrice]);\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : void 0, parsedOutputAmount);\n  const allowance = usePermit2Allowance(\n    maximumAmountIn,\n    getURAddress(isSupportedChain ? account.chainId : void 0, universalRouterAddress),\n    TradeFillType.Classic\n  );\n  const loadingAllowance = allowance.state === AllowanceState.LOADING || universalRouterAddressIsLoading;\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage);\n  const priceImpact = usePriceImpact(trade);\n  const fiatValueTradeInput = useUSDCValue(trade?.inputAmount);\n  const fiatValueTradeOutput = useUSDCValue(parsedOutputAmount);\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput;\n  const nativeCurrency = useCurrency(NATIVE_CHAIN_ID);\n  const nativeCurencyBalance = useCurrencyBalance(account.address ?? void 0, nativeCurrency);\n  const sufficientBalance = useMemo(() => {\n    if (!connected || account.chainId !== UniverseChainId.Mainnet) {\n      return void 0;\n    }\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount;\n      if (!inputCurrencyBalance || !inputAmount) {\n        return void 0;\n      }\n      return !inputCurrencyBalance.lessThan(inputAmount);\n    }\n    if (!nativeCurrency) {\n      return void 0;\n    }\n    const totalEthPriceCurrencyAmount = CurrencyAmount.fromRawAmount(nativeCurrency, JSBI.BigInt(totalEthPrice));\n    return nativeCurencyBalance?.greaterThan(totalEthPriceCurrencyAmount);\n  }, [\n    connected,\n    account.chainId,\n    inputCurrency,\n    nativeCurrency,\n    totalEthPrice,\n    nativeCurencyBalance,\n    trade?.inputAmount,\n    inputCurrencyBalance\n  ]);\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG);\n  }, [inputCurrency, setBagStatus]);\n  const switchChain = useSwitchChain();\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor\n  } = useMemo(() => {\n    if (connected && account.chainId !== UniverseChainId.Mainnet) {\n      const handleClick3 = () => switchChain(UniverseChainId.Mainnet);\n      return getBuyButtonStateData(BuyButtonStates.NOT_SUPPORTED_CHAIN, theme, handleClick3);\n    }\n    if (sufficientBalance === false) {\n      return getBuyButtonStateData(BuyButtonStates.INSUFFICIENT_BALANCE, theme);\n    }\n    if (bagStatus === BagStatus.WARNING) {\n      return getBuyButtonStateData(BuyButtonStates.ERROR, theme);\n    }\n    if (!connected) {\n      const handleClick3 = () => {\n        accountDrawer.open();\n        setBagExpanded({ bagExpanded: false });\n      };\n      return getBuyButtonStateData(BuyButtonStates.WALLET_NOT_CONNECTED, theme, handleClick3);\n    }\n    if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      return getBuyButtonStateData(BuyButtonStates.IN_WALLET_CONFIRMATION, theme);\n    }\n    if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      return getBuyButtonStateData(BuyButtonStates.PROCESSING_TRANSACTION, theme);\n    }\n    if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      if (tradeState === TradeState.INVALID) {\n        return getBuyButtonStateData(BuyButtonStates.INVALID_TOKEN_ROUTE, theme);\n      }\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        return getBuyButtonStateData(BuyButtonStates.NO_TOKEN_ROUTE_FOUND, theme);\n      }\n      return getBuyButtonStateData(BuyButtonStates.FETCHING_TOKEN_ROUTE, theme);\n    }\n    const allowanceRequired = allowance.state === AllowanceState.REQUIRED;\n    const handleClick2 = () => allowanceRequired && allowance.approveAndPermit();\n    if (loadingAllowance) {\n      return getBuyButtonStateData(BuyButtonStates.LOADING_ALLOWANCE, theme, handleClick2);\n    }\n    if (allowanceRequired) {\n      if (allowance.isApprovalPending) {\n        return getBuyButtonStateData(BuyButtonStates.IN_WALLET_ALLOWANCE_APPROVAL, theme, handleClick2);\n      } else if (allowance.isApprovalLoading) {\n        return getBuyButtonStateData(BuyButtonStates.PROCESSING_APPROVAL, theme, handleClick2);\n      } else {\n        return getBuyButtonStateData(BuyButtonStates.REQUIRE_APPROVAL, theme, handleClick2);\n      }\n    }\n    if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      return getBuyButtonStateData(BuyButtonStates.CONFIRM_UPDATED_PRICE, theme, fetchAssets);\n    }\n    if (priceImpact && priceImpact.priceImpactSeverity.type === \"error\") {\n      return getBuyButtonStateData(\n        BuyButtonStates.PRICE_IMPACT_HIGH,\n        theme,\n        fetchAssets,\n        usingPayWithAnyToken,\n        priceImpact\n      );\n    }\n    return getBuyButtonStateData(BuyButtonStates.PAY, theme, fetchAssets, usingPayWithAnyToken);\n  }, [\n    connected,\n    account.chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    loadingAllowance,\n    allowance,\n    priceImpact,\n    theme,\n    fetchAssets,\n    switchChain,\n    accountDrawer,\n    setBagExpanded\n  ]);\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties\n  };\n  return <FooterContainer><Footer><FooterHeader gap=\"xs\"><CurrencyRow><Column gap=\"xs\">{isSupportedChain && <><ThemedText.SubHeaderSmall><Trans i18nKey=\"swap.payWith\" /></ThemedText.SubHeaderSmall><CurrencyInput\n    onClick={() => {\n      if (!bagIsLocked) {\n        setTokenSelectorOpen(true);\n        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED);\n      }\n    }}\n  ><CurrencyLogo currency={activeCurrency} size={24} /><ThemedText.HeadlineSmall fontWeight={535} lineHeight=\"24px\">{activeCurrency?.symbol}</ThemedText.HeadlineSmall><ChevronDown size={20} color={theme.neutral2} /></CurrencyInput></>}</Column><TotalColumn gap=\"xs\"><ThemedText.SubHeaderSmall><Trans i18nKey=\"swap.total\" /></ThemedText.SubHeaderSmall><InputCurrencyValue\n    usingPayWithAnyToken={usingPayWithAnyToken}\n    totalEthPrice={totalEthPrice}\n    activeCurrency={activeCurrency}\n    tradeState={tradeState}\n    trade={trade}\n  /></TotalColumn></CurrencyRow><FiatValue\n    usdcValue={usdcValue}\n    priceImpact={priceImpact}\n    tradeState={tradeState}\n    usingPayWithAnyToken={usingPayWithAnyToken}\n  /></FooterHeader><Trace\n    logPress\n    eventOnTrigger={NFTEventName.NFT_BUY_BAG_PAY}\n    element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n    properties={traceEventProperties}\n    logImpression={connected && !disabled}\n  ><Warning color={warningTextColor}>{warningText}</Warning><Helper color={helperTextColor}>{helperText}</Helper><ActionButton\n    data-testid=\"nft-buy-button\"\n    onClick={handleClick}\n    disabled={disabled || isPending}\n    $backgroundColor={buttonColor}\n    $color={buttonTextColor}\n  >{isPending && <Loader size=\"20px\" stroke=\"white\" />}{buttonText}</ActionButton></Trace></Footer><CurrencySearchModal\n    isOpen={tokenSelectorOpen}\n    onDismiss={() => setTokenSelectorOpen(false)}\n    onCurrencySelect={(currency) => {\n      setInputCurrency(currency.isNative ? void 0 : currency);\n      if (currency.isToken) {\n        sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n          token_address: currency.address,\n          token_symbol: currency.symbol\n        });\n      }\n    }}\n    selectedCurrency={activeCurrency ?? void 0}\n  /></FooterContainer>;\n};\n","\"use strict\";\nimport { UNIVERSAL_ROUTER_ADDRESS, UniversalRouterVersion } from \"@uniswap/universal-router-sdk\";\nimport { useNftUniversalRouterAddressQuery } from \"uniswap/src/data/graphql/uniswap-data-api/__generated__/types-and-hooks\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nexport function getURAddress(chainId, nftURAddress) {\n  if (!chainId) {\n    return void 0;\n  }\n  if (chainId === UniverseChainId.Mainnet) {\n    return nftURAddress ?? UNIVERSAL_ROUTER_ADDRESS(UniversalRouterVersion.V1_2, chainId);\n  }\n  return UNIVERSAL_ROUTER_ADDRESS(UniversalRouterVersion.V1_2, chainId);\n}\nexport function useNftUniversalRouterAddress() {\n  const { data, loading } = useNftUniversalRouterAddressQuery({\n    // no cache because a different version of nftRoute query is going to be called around the same time\n    fetchPolicy: \"no-cache\"\n  });\n  return {\n    universalRouterAddress: data?.nftRoute?.toAddress,\n    universalRouterAddressIsLoading: loading\n  };\n}\n","\"use strict\";\nimport { useBag } from \"nft/hooks/useBag\";\nimport { useSendTransaction } from \"nft/hooks/useSendTransaction\";\nimport { BagStatus, TxStateType } from \"nft/types\";\nimport { useEffect, useRef } from \"react\";\nexport function useSubscribeTransactionState(setModalIsOpen) {\n  const transactionState = useSendTransaction((state) => state.state);\n  const setTransactionState = useSendTransaction((state) => state.setState);\n  const transactionStateRef = useRef(transactionState);\n  const { setBagStatus, setLocked: setBagLocked } = useBag(({ setBagExpanded, setBagStatus: setBagStatus2, setLocked }) => ({\n    setBagExpanded,\n    setBagStatus: setBagStatus2,\n    setLocked\n  }));\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => transactionStateRef.current = state.state);\n  }, []);\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) {\n      setBagStatus(BagStatus.PROCESSING_TRANSACTION);\n    }\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) {\n        setBagStatus(BagStatus.WARNING);\n      } else {\n        setBagStatus(BagStatus.CONFIRM_REVIEW);\n      }\n      setTransactionState(TxStateType.New);\n      setBagLocked(false);\n      setModalIsOpen(false);\n    }\n  }, [setBagLocked, setBagStatus, setModalIsOpen, setTransactionState, transactionStateRef.current]);\n}\n","\"use strict\";\nimport { TradeType } from \"@uniswap/sdk-core\";\nimport useAutoSlippageTolerance from \"hooks/useAutoSlippageTolerance\";\nimport { useDebouncedTrade } from \"hooks/useDebouncedTrade\";\nimport { useMemo } from \"react\";\nimport { RouterPreference } from \"state/routing/types\";\nimport { isClassicTrade } from \"state/routing/utils\";\nexport default function useDerivedPayWithAnyTokenSwapInfo(inputCurrency, parsedOutputAmount) {\n  const { state, trade } = useDebouncedTrade(\n    TradeType.EXACT_OUTPUT,\n    parsedOutputAmount,\n    inputCurrency ?? void 0,\n    RouterPreference.API\n  );\n  const allowedSlippage = useAutoSlippageTolerance(isClassicTrade(trade) ? trade : void 0);\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn2 = trade?.maximumAmountIn(allowedSlippage);\n    return maximumAmountIn2?.currency.isToken ? maximumAmountIn2 : void 0;\n  }, [allowedSlippage, trade]);\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage\n    };\n  }, [allowedSlippage, maximumAmountIn, state, trade]);\n}\n","\"use strict\";\nimport { useTheme } from \"lib/styled-components\";\nimport { useMemo } from \"react\";\nimport { useFormatter } from \"utils/formatNumbers\";\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from \"utils/prices\";\nexport function usePriceImpact(trade) {\n  const theme = useTheme();\n  const { formatPercent } = useFormatter();\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : void 0;\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : void 0;\n    const warningColor = priceImpactWarning === \"error\" ? theme.critical : priceImpactWarning === \"warning\" ? theme.deprecated_accentWarning : void 0;\n    return marketPriceImpact && priceImpactWarning && warningColor ? {\n      priceImpactSeverity: {\n        type: priceImpactWarning,\n        color: warningColor\n      },\n      displayPercentage: () => formatPercent(marketPriceImpact)\n    } : void 0;\n  }, [formatPercent, theme.critical, theme.deprecated_accentWarning, trade]);\n}\n","\"use strict\";\nimport { OpacityHoverState } from \"components/Common/styles\";\nimport styled from \"lib/styled-components\";\nimport { BagCloseIcon } from \"nft/components/icons\";\nimport { useMemo } from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { ButtonText, ThemedText } from \"theme/components\";\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.neutral2};\n  cursor: pointer;\n  font-weight: 535;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`;\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.neutral1};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`;\nconst CounterDot = styled.div`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accent1};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`;\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`;\nconst BASE_SIZING = 17;\nconst INCREMENTAL_SIZING = 6;\nconst getCircleSizing = (numberOfAssets) => {\n  const numberOfCharacters = numberOfAssets.toString().length;\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`;\n};\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets]);\n  return <Wrapper><ThemedText.HeadlineSmall>{isProfilePage ? <Trans i18nKey=\"common.sell.label\" /> : <Trans i18nKey=\"nft.bag\" />}</ThemedText.HeadlineSmall>{numberOfAssets > 0 && <><CounterDot sizing={sizing}>{numberOfAssets}</CounterDot><ClearButton onClick={resetFlow}><Trans i18nKey=\"tokens.selector.button.clear\" /></ClearButton></>}<IconWrapper onClick={closeBag}><BagCloseIcon data-testid=\"nft-bag-close-icon\" /></IconWrapper></Wrapper>;\n};\n","\"use strict\";\nimport { PageType, useIsPage } from \"hooks/useIsPage\";\nimport styled from \"lib/styled-components\";\nimport { Center, Column } from \"nft/components/Flex\";\nimport { BagIcon, LargeTagIcon } from \"nft/components/icons\";\nimport { subhead } from \"nft/css/common.css\";\nimport { themeVars } from \"nft/css/sprinkles.css\";\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`;\nconst EmptyState = () => {\n  const isProfilePage = useIsPage(PageType.NFTS_PROFILE);\n  return <StyledColumn><Center>{isProfilePage ? <LargeTagIcon color={themeVars.colors.neutral3} /> : <BagIcon color={themeVars.colors.neutral3} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />}</Center>{isProfilePage ? <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center> : <Column gap=\"16\"><Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: \"24px\" }}>\n            Your bag is empty\n          </Center><Center fontSize=\"12\" fontWeight=\"book\" color=\"neutral2\" style={{ lineHeight: \"16px\" }}>\n            Selected NFTs will appear here\n          </Center></Column>}</StyledColumn>;\n};\nexport default EmptyState;\n","\"use strict\";\nimport { ButtonEmphasis, ButtonSize } from \"components/Button/buttons\";\nimport { Box } from \"components/deprecated/Box\";\nimport { useIsMobile } from \"hooks/screenSize/useIsMobile\";\nimport { Column, Row } from \"nft/components/Flex\";\nimport { RemoveAssetButton, RemoveButton } from \"nft/components/bag/BagRow\";\nimport * as styles from \"nft/components/bag/BagRow.css\";\nimport { VerifiedIcon } from \"nft/components/icons\";\nimport { useSellAsset } from \"nft/hooks\";\nimport { useState } from \"react\";\nconst ProfileAssetRow = ({ asset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset);\n  const isMobile = useIsMobile();\n  const [hovered, setHovered] = useState(false);\n  const handleHover = () => setHovered(!hovered);\n  const handleRemoveAsset = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    removeAsset(asset);\n  };\n  return <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}><Box position=\"relative\" display=\"flex\">{isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}<img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} /></Box><Column overflow=\"hidden\" width=\"full\" color=\"neutral1\"><Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\"><Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box></Row><Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\"><Box className={styles.collectionName}>{asset.asset_contract.name}</Box>{asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}</Row></Column>{hovered && !isMobile && <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>}</Row>;\n};\nexport default ProfileAssetRow;\n","\"use strict\";\nimport { Column } from \"nft/components/Flex\";\nimport ProfileAssetRow from \"nft/components/bag/profile/ProfileAssetRow\";\nimport { useSellAsset } from \"nft/hooks\";\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets);\n  return <Column>{sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}</Column>;\n};\n","\"use strict\";\nimport { NFTEventName } from \"@uniswap/analytics-events\";\nimport { Box } from \"components/deprecated/Box\";\nimport { useIsMobile } from \"hooks/screenSize/useIsMobile\";\nimport { PageType, useIsPage } from \"hooks/useIsPage\";\nimport styled from \"lib/styled-components\";\nimport { Column } from \"nft/components/Flex\";\nimport * as styles from \"nft/components/bag/Bag.css\";\nimport { BagContent } from \"nft/components/bag/BagContent\";\nimport { BagFooter } from \"nft/components/bag/BagFooter\";\nimport { BagHeader } from \"nft/components/bag/BagHeader\";\nimport EmptyState from \"nft/components/bag/EmptyContent\";\nimport { ProfileBagContent } from \"nft/components/bag/profile/ProfileBagContent\";\nimport { Portal } from \"nft/components/common/Portal\";\nimport { Overlay } from \"nft/components/modals/Overlay\";\nimport { useBag, useProfilePageState, useSellAsset, useSubscribeScrollState } from \"nft/hooks\";\nimport { BagStatus, ProfilePageStateType } from \"nft/types\";\nimport { formatAssetEventProperties, recalculateBagUsingPooledAssets } from \"nft/utils\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { Trans } from \"react-i18next\";\nimport { Z_INDEX } from \"theme/zIndex\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nexport const BAG_WIDTH = 320;\nexport const XXXL_BAG_WIDTH = 360;\nconst BagContainer = styled.div`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.surface1};\n  border: 1px solid ${({ theme }) => theme.surface3};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.deprecated_shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) => raiseZIndex ? isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1 : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`;\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`;\nconst ContinueButton = styled.div`\n  background: ${({ theme }) => theme.accent1};\n  color: ${({ theme }) => theme.deprecated_accentTextLightPrimary};\n  margin: 32px 28px 16px;\n  padding: 10px 0px;\n  border-radius: 12px;\n  text-align: center;\n  font-size: 16px;\n  font-weight: 535;\n  line-height: 20px;\n  cursor: pointer;\n  transition: ${({ theme }) => theme.transition.duration.medium};\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`;\nconst ScrollingIndicator = ({ top, show }) => <Box\n  marginX=\"24\"\n  borderWidth=\"1px\"\n  borderStyle=\"solid\"\n  borderColor=\"transparent\"\n  borderTopColor={top ? \"transparent\" : \"surface3\"}\n  borderBottomColor={top ? \"surface3\" : \"transparent\"}\n  opacity={show ? \"1\" : \"0\"}\n  transition=\"250\"\n/>;\nconst Bag = () => {\n  const { resetSellAssets, sellAssets } = useSellAsset(({ reset: reset2, sellAssets: sellAssets2 }) => ({\n    resetSellAssets: reset2,\n    sellAssets: sellAssets2\n  }));\n  const { setProfilePageState } = useProfilePageState(({ setProfilePageState: setProfilePageState2 }) => ({ setProfilePageState: setProfilePageState2 }));\n  const { bagStatus, bagIsLocked, reset, bagExpanded, toggleBag, setBagExpanded } = useBag((state) => ({\n    ...state,\n    bagIsLocked: state.isLocked,\n    uncheckedItemsInBag: state.itemsInBag\n  }));\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag: itemsInBag2 }) => ({ uncheckedItemsInBag: itemsInBag2 }));\n  const isProfilePage = useIsPage(PageType.NFTS_PROFILE);\n  const isDetailsPage = useIsPage(PageType.NFTS_DETAILS);\n  const isNFTPage = useIsPage(PageType.NFTS);\n  const isMobile = useIsMobile();\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag]);\n  const [isModalOpen, setModalIsOpen] = useState(false);\n  const { userCanScroll, scrollRef, scrollProgress, scrollHandler } = useSubscribeScrollState();\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true });\n  }, [setBagExpanded]);\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) {\n      setModalIsOpen(true);\n    }\n  }, [bagIsLocked, isModalOpen]);\n  const hasAssetsToShow = itemsInBag.length > 0;\n  const isBuyingAssets = itemsInBag.length > 0;\n  const isSellingAssets = sellAssets.length > 0;\n  const shouldRenderEmptyState = Boolean(\n    !isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG || isProfilePage && !isSellingAssets\n  );\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset))\n    }),\n    [itemsInBag]\n  );\n  if (!bagExpanded || !isNFTPage) {\n    return null;\n  }\n  return <Portal><BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}><BagHeader\n    numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n    closeBag={handleCloseBag}\n    resetFlow={isProfilePage ? resetSellAssets : reset}\n    isProfilePage={isProfilePage}\n  />{shouldRenderEmptyState && <EmptyState />}<ScrollingIndicator top show={userCanScroll && scrollProgress > 0} /><Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">{isProfilePage ? <ProfileBagContent /> : <BagContent />}</Column>{hasAssetsToShow && !isProfilePage && <BagFooter setModalIsOpen={setModalIsOpen} eventProperties={eventProperties} />}{isSellingAssets && isProfilePage && <ContinueButton\n    onClick={() => {\n      toggleBag();\n      setProfilePageState(ProfilePageStateType.LISTING);\n      sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n        list_quantity: sellAssets.length,\n        collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n        token_ids: sellAssets.map((asset) => asset.tokenId)\n      });\n    }}\n  ><Trans i18nKey=\"common.button.continue\" /></ContinueButton>}</BagContainer>{isDetailsPage ? <DetailsPageBackground onClick={toggleBag} /> : isModalOpen && <Overlay onClick={() => !bagIsLocked ? setModalIsOpen(false) : void 0} />}</Portal>;\n};\nexport default Bag;\n","\"use strict\";\nimport { useState } from \"react\";\nexport function useSubscribeScrollState() {\n  const [userCanScroll, setUserCanScroll] = useState(false);\n  const [scrollProgress, setScrollProgress] = useState(0);\n  const scrollRef = (node) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight;\n      canScroll !== userCanScroll && setUserCanScroll(canScroll);\n    }\n  };\n  const scrollHandler = (event) => {\n    const scrollTop = event.currentTarget.scrollTop;\n    const containerHeight = event.currentTarget.clientHeight;\n    const scrollHeight = event.currentTarget.scrollHeight;\n    setScrollProgress(scrollTop ? (scrollTop + containerHeight) / scrollHeight * 100 : 0);\n  };\n  return { scrollRef, scrollHandler, scrollProgress, userCanScroll };\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2ef rgw6ez2jx rgw6ez1yr rgw6ez8ct';\nexport var bagContainer = '_1jcz50r3 rgw6ez48r rgw6ez3f3 rgw6ez3iy rgw6ez16r rgw6ez1dr rgw6ez39l rgw6ez4qf rgw6ez7zx rgw6ez55f rgw6ez895 rgw6ez4b9';","\"use strict\";\nimport { Box } from \"components/deprecated/Box\";\nimport * as styles from \"nft/components/modals/Overlay.css\";\nimport noop from \"utilities/src/react/noop\";\nexport const stopPropagation = (event) => {\n  event.stopPropagation();\n  event.nativeEvent.stopImmediatePropagation();\n};\nexport const Overlay = ({ onClick = noop }) => {\n  return <Box className={styles.overlay} onClick={onClick} />;\n};\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/nft/components/modals/Overlay.css.ts.vanilla.css!=!../../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/modals/Overlay.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xOTlxZGw3MSB7CiAgb3BhY2l0eTogMC43MjsKICBvdmVyZmxvdzogaGlkZGVuOwogIHotaW5kZXg6IDEwMzg7Cn0=\\\"}!../../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var overlay = '_199qdl71 rgw6ez3f3 rgw6ez343 rgw6ez17l rgw6ez1ef rgw6ez48r rgw6ez44l rgw6ez4u3';","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { useCurrency } from \"hooks/Tokens\";\nimport tryParseCurrencyAmount from \"lib/utils/tryParseCurrencyAmount\";\nimport { useBag } from \"nft/hooks/useBag\";\nimport { BagItemStatus } from \"nft/types\";\nimport { useMemo } from \"react\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/swap/hooks/useUSDCPrice\";\nexport function useBagTotalEthPrice() {\n  const itemsInBag = useBag((state) => state.itemsInBag);\n  return useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) => item.status !== BagItemStatus.UNAVAILABLE ? total.add(\n        BigNumber.from(\n          item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n        )\n      ) : total,\n      BigNumber.from(0)\n    );\n    return totalEthPrice;\n  }, [itemsInBag]);\n}\nexport function useBagTotalUsdPrice() {\n  const totalEthPrice = useBagTotalEthPrice();\n  const defaultCurrency = useCurrency(\"ETH\");\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? void 0);\n  }, [defaultCurrency, totalEthPrice]);\n  const usdcValue = useUSDCValue(parsedOutputAmount);\n  return useMemo(() => {\n    return usdcValue?.toExact();\n  }, [usdcValue]);\n}\n","\"use strict\";\nimport { Interface } from \"@ethersproject/abi\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexStripZeros } from \"@ethersproject/bytes\";\nimport { NFTEventName } from \"@uniswap/analytics-events\";\nimport CryptoPunksMarket from \"nft/abis/CryptoPunksMarket.json\";\nimport { TxStateType } from \"nft/types\";\nimport { compareAssetsWithTransactionRoute } from \"nft/utils/txRoute/combineItemsWithTxRoute\";\nimport ERC1155 from \"uniswap/src/abis/erc1155.json\";\nimport ERC721 from \"uniswap/src/abis/erc721.json\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nexport const useSendTransaction = create()(\n  devtools(\n    (set) => ({\n      state: TxStateType.New,\n      txHash: \"\",\n      purchasedWithErc20: false,\n      clearTxHash: () => set({ txHash: \"\" }),\n      setState: (newState) => set(() => ({ state: newState })),\n      sendTransaction: async (signer, selectedAssets, transactionData, purchasedWithErc20) => {\n        const address = await signer.getAddress();\n        try {\n          const txNoGasLimit = {\n            to: transactionData.to,\n            value: transactionData.valueToSend ? BigNumber.from(transactionData.valueToSend) : void 0,\n            data: transactionData.data\n          };\n          const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100);\n          const tx = { ...txNoGasLimit, gasLimit };\n          set({ state: TxStateType.Signing });\n          const res = await signer.sendTransaction(tx);\n          set({ state: TxStateType.Confirming });\n          set({ txHash: res.hash });\n          set({ purchasedWithErc20 });\n          sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_SIGNED, { transaction_hash: res.hash });\n          const txReceipt = await res.wait();\n          if (txReceipt.status === 1) {\n            const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route);\n            const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased);\n            set({ state: TxStateType.Success });\n            return {\n              nftsPurchased,\n              nftsNotPurchased,\n              txReceipt\n            };\n          } else {\n            set({ state: TxStateType.Failed });\n            return {\n              nftsPurchased: [],\n              nftsNotPurchased: selectedAssets,\n              txReceipt\n            };\n          }\n        } catch (e) {\n          if (e.code === 4001) {\n            set({ state: TxStateType.Denied });\n          } else {\n            logger.error(e, {\n              tags: {\n                file: \"nft/hooks/useSendTransaction\",\n                function: \"useSendTransaction\"\n              }\n            });\n            set({ state: TxStateType.Invalid });\n          }\n          return void 0;\n        }\n      }\n    }),\n    { name: \"useSendTransactionState\" }\n  )\n);\nconst findNFTsPurchased = (txReceipt, signerAddress, toBuy, txRoute) => {\n  if (!txReceipt.logs) {\n    return [];\n  }\n  const erc721Interface = new Interface(ERC721);\n  const erc1155Interface = new Interface(ERC1155);\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket);\n  const transferErc721BuyEvents = txReceipt.logs.filter(\n    (x) => x.topics[0] === erc721Interface.getEventTopic(\"Transfer\") && hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  );\n  const transferredErc721 = transferErc721BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: parseInt(x.topics[3]).toString()\n  }));\n  const transferErc1155BuyEvents = txReceipt.logs.filter(\n    (x) => x.topics[0] === erc1155Interface.getEventTopic(\"TransferSingle\") && hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase()\n  );\n  const transferredErc1155 = transferErc1155BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: erc1155Interface.parseLog(x).args[3].toString()\n  }));\n  const transferCryptopunkEvents = txReceipt.logs.filter(\n    (x) => x.topics[0] === cryptopunksMarketInterface.getEventTopic(\"PunkTransfer\") && hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  );\n  const transferredCryptopunks = transferCryptopunkEvents.map((x) => ({\n    address: x.address,\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString()\n  }));\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks];\n  const transferredItems = toBuy.filter((assetToBuy) => {\n    return allTransferred.some(\n      (purchasedNft) => assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() && parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId\n    );\n  });\n  return compareAssetsWithTransactionRoute(transferredItems, txRoute).updatedAssets;\n};\nconst findNFTsNotPurchased = (toBuy, nftsPurchased) => {\n  const nftsNotPurchased = [];\n  toBuy.forEach((selectedAsset) => {\n    const purchasedNft = nftsPurchased.find(\n      (x) => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId\n    );\n    if (!purchasedNft) {\n      nftsNotPurchased.push(selectedAsset);\n    }\n  });\n  return nftsNotPurchased;\n};\n","\"use strict\";\nimport { create } from \"zustand\";\nimport { devtools } from \"zustand/middleware\";\nexport const useTransactionResponse = create()(\n  devtools(\n    (set) => ({\n      transactionResponse: void 0,\n      setTransactionResponse: (txResponse) => set(() => ({\n        transactionResponse: txResponse\n      }))\n    }),\n    { name: \"useTransactionResponse\" }\n  )\n);\n","\"use strict\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { useUSDPrice } from \"hooks/useUSDPrice\";\nimport useNativeCurrency from \"lib/hooks/useNativeCurrency\";\nimport tryParseCurrencyAmount from \"lib/utils/tryParseCurrencyAmount\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nexport const useNativeUsdPrice = (chainId = UniverseChainId.Mainnet) => {\n  const nativeCurrency = useNativeCurrency(chainId);\n  const parsedAmount = tryParseCurrencyAmount(\"1\", nativeCurrency);\n  const usdcValue = useUSDPrice(parsedAmount)?.data ?? 0;\n  return usdcValue;\n};\nexport function useUsdPriceofNftAsset(asset) {\n  const fetchedPriceData = useNativeUsdPrice();\n  return fetchedPriceData && asset?.priceInfo?.ETHPrice ? (parseFloat(formatEther(asset?.priceInfo?.ETHPrice)) * fetchedPriceData).toString() : \"\";\n}\n","\"use strict\";\nimport {\n  SquareCryptopunksMarketplaceIcon,\n  SquareEnsVisionMarketplaceIcon,\n  SquareFoundationMarketplaceIcon,\n  SquareGemMarketplaceIcon,\n  SquareLooksBlurMarketplaceIcon,\n  SquareLooksRareMarketplaceIcon,\n  SquareLooksX2Y2MarketplaceIcon,\n  SquareNft20MarketplaceIcon,\n  SquareNftXMarketplaceIcon,\n  SquareOpenSeaMarketplaceIcon,\n  SquareRaribleMarketplaceIcon,\n  SquareSudoSwapMarketplaceIcon,\n  SquareZoraMarketplaceIcon\n} from \"nft/components/icons\";\nimport { Markets } from \"nft/types\";\nimport { v4 as uuidv4 } from \"uuid\";\nexport function getRarityStatus(rarityStatusCache, id, assets) {\n  if (rarityStatusCache.has(id)) {\n    return rarityStatusCache.get(id);\n  }\n  const hasRarity = assets && Array.from(assets).reduce((reducer, asset) => !!(reducer || asset?.rarity), false);\n  if (hasRarity) {\n    rarityStatusCache.set(id, hasRarity);\n  }\n  return hasRarity;\n}\nexport const getAssetHref = (asset, origin) => {\n  const address = asset.address !== void 0 ? asset.address : asset.asset_contract.address;\n  return `/nfts/asset/${address}/${asset.tokenId}${origin ? `?origin=${origin}` : \"\"}`;\n};\nexport const getMarketplaceIcon = (marketplace, size = \"16\") => {\n  switch (marketplace.toLowerCase()) {\n    case Markets.Opensea:\n      return <SquareOpenSeaMarketplaceIcon width={size} height={size} />;\n    case Markets.LooksRare:\n      return <SquareLooksRareMarketplaceIcon width={size} height={size} />;\n    case Markets.X2Y2:\n      return <SquareLooksX2Y2MarketplaceIcon width={size} height={size} gradientId={uuidv4()} />;\n    case Markets.Blur:\n      return <SquareLooksBlurMarketplaceIcon width={size} height={size} />;\n    case Markets.Sudoswap:\n      return <SquareSudoSwapMarketplaceIcon width={size} height={size} />;\n    case Markets.NFTX:\n      return <SquareNftXMarketplaceIcon width={size} height={size} gradientId={uuidv4()} />;\n    case Markets.Gem:\n      return <SquareGemMarketplaceIcon width={size} height={size} gradientId={uuidv4()} />;\n    case Markets.Zora:\n      return <SquareZoraMarketplaceIcon width={size} height={size} gradientId={uuidv4()} />;\n    case Markets.Ensvision:\n      return <SquareEnsVisionMarketplaceIcon width={size} height={size} />;\n    case Markets.Cryptopunks:\n    case \"larvalabs\":\n      return <SquareCryptopunksMarketplaceIcon width={size} height={size} />;\n    case Markets.Rarible:\n      return <SquareRaribleMarketplaceIcon width={size} height={size} />;\n    case Markets.Foundation:\n      return <SquareFoundationMarketplaceIcon width={size} height={size} />;\n    case Markets.NFT20:\n      return <SquareNft20MarketplaceIcon width={size} height={size} />;\n    default:\n      return null;\n  }\n};\nexport const generateTweetForAsset = (asset) => {\n  return `https://twitter.com/intent/tweet?text=Check%20out%20${asset.name ? encodeURIComponent(asset.name) : `${asset.collectionName}%20%23${asset.tokenId}`}%20(${asset.collectionName})%20https://app.uniswap.org/nfts/asset/${asset.address}/${asset.tokenId}%20via%20@uniswap`;\n};\nexport const generateTweetForPurchase = (assets, txHashUrl) => {\n  const multipleCollections = assets.length > 0 && assets.some((asset) => asset.address !== assets[0].address);\n  const collectionUrl = assets.length > 0 && !multipleCollections ? `collection/${assets[0].address}` : \"\";\n  const tweetText = `I just purchased ${multipleCollections ? `${assets.length} NFTs` : `${assets.length} ${assets[0].collectionName ?? \"NFT\"}`} with @Uniswap \\u{1F984}\n\nhttps://app.uniswap.org/nfts/${collectionUrl}\n${txHashUrl}`;\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`;\n};\nfunction getMinListingPrice(listings) {\n  return Math.min(...listings.map((listing) => listing.price ?? 0)) ?? 0;\n}\nfunction mapAssetsToCollections(assets) {\n  const collections = assets.map((asset) => asset.collection?.twitterUrl ?? asset.collection?.name ?? \"\");\n  const uniqueCollections = [...new Set(collections)];\n  return uniqueCollections.map((collection) => {\n    return {\n      collection,\n      items: assets.filter((asset) => asset.collection?.twitterUrl === collection || asset.collection?.name === collection).map((asset) => asset.name ?? \"\")\n    };\n  });\n}\nexport const generateTweetForList = (assets) => {\n  const tweetText = assets.length == 1 ? `I just listed ${assets[0].collection?.twitterUrl ? `${assets[0].collection?.twitterUrl} ` : `${assets[0].collection?.name} ` ?? \"\"}${assets[0].name} for ${getMinListingPrice(assets[0].newListings ?? [])} ETH on ${assets[0].marketplaces?.map((market) => market.name).join(\", \")}. Buy it on @Uniswap at https://app.uniswap.org/${getAssetHref(assets[0])}` : `I just listed ${assets.length} items on @Uniswap at https://app.uniswap.org/nfts/profile\n\nCollections: ${mapAssetsToCollections(assets).map(({ collection, items }) => `${collection} ${items.map((item) => item).join(\", \")}`).join(\", \")} \n\nMarketplaces: ${assets[0].marketplaces?.map((market) => market.name).join(\", \")}`;\n  return `https://twitter.com/intent/tweet?text=${encodeURIComponent(tweetText)}`;\n};\n","\"use strict\";\nexport const isInSameSudoSwapPool = (assetA, assetB) => {\n  if (!assetA.sellorders || !assetB.sellorders) {\n    return false;\n  }\n  const assetASudoSwapPoolParameters = assetA.sellorders[0].protocolParameters;\n  const assetBSudoSwapPoolParameters = assetB.sellorders[0].protocolParameters;\n  const assetAPoolAddress = assetASudoSwapPoolParameters?.poolAddress ? assetASudoSwapPoolParameters.poolAddress : void 0;\n  const assetBPoolAddress = assetBSudoSwapPoolParameters?.poolAddress ? assetBSudoSwapPoolParameters.poolAddress : void 0;\n  if (!assetAPoolAddress || !assetBPoolAddress) {\n    return false;\n  }\n  if (assetAPoolAddress !== assetBPoolAddress) {\n    return false;\n  }\n  return true;\n};\nexport const isInSameMarketplaceCollection = (assetA, assetB) => {\n  return assetA.address === assetB.address && assetA.marketplace === assetB.marketplace;\n};\n","\"use strict\";\nexport const formatAssetEventProperties = (assets) => ({\n  collection_addresses: assets.map((asset) => asset.address),\n  token_ids: assets.map((asset) => asset.tokenId),\n  token_types: assets.map((asset) => asset.tokenType)\n});\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { BagItemStatus, isPooledMarket, Markets } from \"nft/types\";\nimport { isInSameMarketplaceCollection, isInSameSudoSwapPool } from \"nft/utils\";\nconst PRECISION = \"1000000000000000000\";\nconst PROTOCOL_FEE_MULTIPLIER = BigNumber.from(\"5000000000000000\");\nvar BondingCurve = /* @__PURE__ */ ((BondingCurve2) => {\n  BondingCurve2[\"Linear\"] = \"LINEAR\";\n  BondingCurve2[\"Exponential\"] = \"EXPONENTIAL\";\n  BondingCurve2[\"Xyk\"] = \"XYK\";\n  return BondingCurve2;\n})(BondingCurve || {});\nconst getPoolParameters = (protocolParameters) => {\n  return {\n    delta: protocolParameters?.delta ? protocolParameters.delta : void 0,\n    fee: protocolParameters?.ammFeeFixed ? protocolParameters.ammFeeFixed : void 0,\n    spotPrice: protocolParameters?.poolMetadata?.spotPrice,\n    bondingCurve: protocolParameters?.poolMetadata?.bondingCurve\n  };\n};\nconst calculateScaledPrice = (currentPrice, poolFee) => {\n  const protocolFee = currentPrice.mul(PROTOCOL_FEE_MULTIPLIER).div(BigNumber.from(PRECISION));\n  const tradeFee = currentPrice.mul(poolFee).div(BigNumber.from(PRECISION));\n  return currentPrice.add(protocolFee).add(tradeFee);\n};\nconst calcSudoSwapLinearBondingCurve = (currentPrice, delta, position = 0) => {\n  for (let i = 0; i <= position; i++) {\n    currentPrice = currentPrice.add(delta);\n  }\n  return currentPrice;\n};\nconst calcSudoSwapExponentialBondingCurve = (currentPrice, delta, position = 0) => {\n  for (let i = 0; i <= position; i++) {\n    currentPrice = currentPrice.mul(delta).div(BigNumber.from(PRECISION));\n  }\n  return currentPrice;\n};\nconst calcSudoSwapXykBondingCurve = (currentPrice, sudoSwapPool, position = 0) => {\n  let virtualTokenBalance = BigNumber.from(sudoSwapPool.spotPrice);\n  let virtualNFTBalance = BigNumber.from(sudoSwapPool.delta);\n  if (virtualNFTBalance.sub(BigNumber.from(1)).gt(BigNumber.from(0))) {\n    currentPrice = virtualTokenBalance.div(virtualNFTBalance.sub(BigNumber.from(1)));\n  } else {\n    return void 0;\n  }\n  for (let i = 1; i <= position; i++) {\n    virtualTokenBalance = virtualTokenBalance.add(currentPrice);\n    virtualNFTBalance = virtualNFTBalance.sub(BigNumber.from(1));\n    if (!virtualNFTBalance.sub(BigNumber.from(1)).isZero()) {\n      currentPrice = virtualTokenBalance.div(virtualNFTBalance.sub(BigNumber.from(1)));\n    } else {\n      return void 0;\n    }\n  }\n  return currentPrice;\n};\nconst calcSudoSwapPrice = (asset, position = 0) => {\n  if (!asset.sellorders) {\n    return void 0;\n  }\n  const sudoSwapParameters = asset.sellorders[0].protocolParameters;\n  const sudoSwapPool = getPoolParameters(sudoSwapParameters);\n  if (!sudoSwapPool.fee || !sudoSwapPool.delta || !sudoSwapPool.spotPrice || !sudoSwapPool.bondingCurve) {\n    return void 0;\n  }\n  let currentPrice = BigNumber.from(sudoSwapPool.spotPrice);\n  const delta = BigNumber.from(sudoSwapPool.delta);\n  const poolFee = BigNumber.from(sudoSwapPool.fee);\n  if (sudoSwapPool.bondingCurve === \"LINEAR\" /* Linear */) {\n    currentPrice = calcSudoSwapLinearBondingCurve(currentPrice, delta, position);\n  } else if (sudoSwapPool.bondingCurve === \"EXPONENTIAL\" /* Exponential */) {\n    currentPrice = calcSudoSwapExponentialBondingCurve(currentPrice, delta, position);\n  } else if (sudoSwapPool.bondingCurve === \"XYK\" /* Xyk */) {\n    const xykCurrentPrice = calcSudoSwapXykBondingCurve(currentPrice, sudoSwapPool, position);\n    if (xykCurrentPrice) {\n      currentPrice = xykCurrentPrice;\n    } else {\n      return void 0;\n    }\n  } else {\n    return void 0;\n  }\n  return calculateScaledPrice(currentPrice, poolFee).toString();\n};\nconst calcAmmBasedPoolprice = (asset, position = 0) => {\n  if (!asset.sellorders) {\n    return \"\";\n  }\n  let amountToBuy = BigNumber.from(0);\n  let marginalBuy = BigNumber.from(0);\n  const nft = asset.sellorders[0].protocolParameters;\n  const decimals = BigNumber.from(1).mul(10).pow(18);\n  const ammFee = nft?.ammFeePercent ? (100 + nft.ammFeePercent) * 100 : 110 * 100;\n  if (asset.marketplace === Markets.NFTX) {\n    const sixteenmul = BigNumber.from(1).mul(10).pow(16);\n    amountToBuy = BigNumber.from(ammFee).div(100).mul(position + 1);\n    amountToBuy = amountToBuy.mul(sixteenmul);\n    marginalBuy = BigNumber.from(ammFee).div(100).mul(position);\n    marginalBuy = marginalBuy.mul(sixteenmul);\n  }\n  if (asset.marketplace === Markets.NFT20) {\n    amountToBuy = BigNumber.from(100).mul(position + 1);\n    amountToBuy = amountToBuy.mul(decimals);\n    marginalBuy = BigNumber.from(100).mul(position);\n    marginalBuy = marginalBuy.mul(decimals);\n  }\n  const ethReserves = BigNumber.from(\n    nft?.poolMetadata?.ethReserves?.toLocaleString(\"fullwide\", { useGrouping: false }) ?? 1\n  );\n  const tokenReserves = BigNumber.from(\n    nft?.poolMetadata?.tokenReserves?.toLocaleString(\"fullwide\", { useGrouping: false }) ?? 1\n  );\n  const numerator = ethReserves.mul(amountToBuy).mul(1e3);\n  const denominator = tokenReserves.sub(amountToBuy).mul(997);\n  const marginalnumerator = ethReserves.mul(marginalBuy).mul(1e3);\n  const marginaldenominator = tokenReserves.sub(marginalBuy).mul(997);\n  let price = numerator.div(denominator);\n  const marginalprice = marginalnumerator.div(marginaldenominator);\n  price = price.sub(marginalprice);\n  price = price.mul(101).div(100);\n  return price.toString();\n};\nexport const calcPoolPrice = (asset, position = 0) => {\n  if (!asset.sellorders) {\n    return \"\";\n  }\n  if (asset.marketplace === Markets.Sudoswap) {\n    return calcSudoSwapPrice(asset, position) ?? \"0\";\n  }\n  return calcAmmBasedPoolprice(asset, position);\n};\nexport const calcAvgGroupPoolPrice = (asset, numberOfAssets) => {\n  let total = BigNumber.from(0);\n  for (let i = 0; i < numberOfAssets; i++) {\n    if (asset.marketplace === Markets.Sudoswap) {\n      total = total.add(BigNumber.from(calcSudoSwapPrice(asset, i) ?? \"0\"));\n    } else {\n      total = total.add(BigNumber.from(calcPoolPrice(asset, i)));\n    }\n  }\n  return total.div(numberOfAssets).toString();\n};\nconst recalculatePooledAssetPrice = (asset, position) => {\n  return asset.marketplace === Markets.Sudoswap ? calcSudoSwapPrice(asset, position) ?? \"\" : calcPoolPrice(asset, position);\n};\nexport const recalculateBagUsingPooledAssets = (uncheckedItemsInBag) => {\n  if (!uncheckedItemsInBag.some((item) => item.asset.marketplace && isPooledMarket(item.asset.marketplace)) || uncheckedItemsInBag.every(\n    (item) => item.status === BagItemStatus.REVIEWED || item.status === BagItemStatus.REVIEWING_PRICE_CHANGE\n  )) {\n    return uncheckedItemsInBag;\n  }\n  const itemsInBag = [...uncheckedItemsInBag];\n  itemsInBag.forEach((item) => {\n    if (item.asset.marketplace) {\n      if (isPooledMarket(item.asset.marketplace)) {\n        const asset = item.asset;\n        const isPriceChangedAsset = !!asset.updatedPriceInfo;\n        const itemsInPool = asset.marketplace === Markets.Sudoswap ? itemsInBag.filter((bagItem) => isInSameSudoSwapPool(item.asset, bagItem.asset)) : itemsInBag.filter((bagItem) => isInSameMarketplaceCollection(item.asset, bagItem.asset));\n        const calculatedPrice = isPriceChangedAsset ? calcAvgGroupPoolPrice(asset, itemsInPool.length) : recalculatePooledAssetPrice(\n          asset,\n          itemsInPool.findIndex((itemInPool) => itemInPool.asset.tokenId === asset.tokenId)\n        );\n        if (isPriceChangedAsset && item.asset.updatedPriceInfo) {\n          item.asset.updatedPriceInfo.ETHPrice = item.asset.updatedPriceInfo.basePrice = calculatedPrice;\n        } else {\n          item.asset.priceInfo.ETHPrice = calculatedPrice;\n        }\n      }\n    }\n  });\n  return itemsInBag;\n};\n","\"use strict\";\nimport { formatEther } from \"@ethersproject/units\";\nimport { isPooledMarket, Markets } from \"nft/types\";\nimport { calcAvgGroupPoolPrice, isInSameMarketplaceCollection, isInSameSudoSwapPool } from \"nft/utils\";\nconst isTheSame = (item, routeAsset) => {\n  if (\"id\" in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id;\n  } else {\n    return \"address\" in routeAsset && routeAsset.address.toLowerCase() === item.address.toLowerCase() && routeAsset.tokenId === item.tokenId;\n  }\n};\nconst getPriceDiff = (oldPrice, newPrice) => {\n  const hasPriceDiff = oldPrice !== newPrice;\n  const hasVisiblePriceDiff = formatEther(oldPrice) !== formatEther(newPrice);\n  return { hasPriceDiff, hasVisiblePriceDiff };\n};\nconst isAveragePriceOfPooledAssets = (asset, numberOfAssetsInPool, expectedPrice) => {\n  return !getPriceDiff(calcAvgGroupPoolPrice(asset, numberOfAssetsInPool), expectedPrice).hasVisiblePriceDiff;\n};\nconst isAveragedPrice = (item, items, route, txRoute) => {\n  if (!(route && \"priceInfo\" in route.assetOut)) {\n    return false;\n  }\n  return !!item.marketplace && isPooledMarket(item.marketplace) && isAveragePriceOfPooledAssets(\n    item,\n    items.filter((routeItem) => itemInRouteAndSamePool(item, routeItem, txRoute)).length,\n    route.assetOut.priceInfo.basePrice\n  );\n};\nconst getRouteForItem = (item, txRoute) => {\n  return txRoute && txRoute.find((r) => r.action === \"Buy\" && isTheSame(item, r.assetOut));\n};\nconst itemHasRoute = (item, txRoute) => {\n  return !!getRouteForItem(item, txRoute);\n};\nconst itemInRouteAndSamePool = (item, routeItem, txRoute) => {\n  return itemHasRoute(routeItem, txRoute) && (item.marketplace === Markets.Sudoswap ? isInSameSudoSwapPool(item, routeItem) : isInSameMarketplaceCollection(item, routeItem));\n};\nexport const compareAssetsWithTransactionRoute = (items, txRoute) => {\n  let hasPriceAdjustment = false;\n  const updatedAssets = items.map((item) => {\n    const route = getRouteForItem(item, txRoute);\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true\n      };\n    }\n    let newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo;\n    if (route && \"priceInfo\" in route.assetOut) {\n      const { hasPriceDiff, hasVisiblePriceDiff } = getPriceDiff(\n        newPriceInfo.basePrice,\n        route.assetOut.priceInfo.basePrice\n      );\n      newPriceInfo = route.assetOut.priceInfo;\n      hasPriceAdjustment = hasPriceDiff;\n      if (hasVisiblePriceDiff) {\n        if (!isAveragedPrice(item, items, route, txRoute)) {\n          return {\n            ...item,\n            updatedPriceInfo: newPriceInfo\n          };\n        }\n      }\n    }\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: void 0,\n      orderSource: route && \"orderSource\" in route.assetOut ? route.assetOut.orderSource : void 0\n    };\n  });\n  return { hasPriceAdjustment, updatedAssets };\n};\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nconst updatedAssetPriceDifference = (asset) => {\n  if (!asset.updatedPriceInfo) {\n    return BigNumber.from(0);\n  }\n  return BigNumber.from(asset.updatedPriceInfo.ETHPrice).sub(BigNumber.from(asset.priceInfo.ETHPrice));\n};\nconst sortUpdatedAssets = (x, y) => {\n  return updatedAssetPriceDifference(x).gt(updatedAssetPriceDifference(y)) ? -1 : 1;\n};\nexport const getTotalNftValue = (nfts) => {\n  return nfts && nfts.reduce(\n    (ethTotal, nft) => ethTotal.add(BigNumber.from(nft.updatedPriceInfo ? nft.updatedPriceInfo.ETHPrice : nft.priceInfo.ETHPrice)),\n    BigNumber.from(0)\n  );\n};\nexport function filterUpdatedAssetsByState(assets) {\n  const unchanged = assets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable);\n  const priceChanged = assets.filter((asset) => asset.updatedPriceInfo).sort(sortUpdatedAssets);\n  const unavailable = assets.filter((asset) => asset.isUnavailable);\n  return { unchanged, priceChanged, unavailable };\n}\n"],"names":["assetName","bagRow","bagRowImage","collectionName","grayscaleImage","icon","dash","keyframes","Circle","styled","circle","theme","accent1","TimedLoader","Box","display","position","svg","height","width","strokeWidth","strokeLinecap","style","transform","transformOrigin","fill","r","cx","cy","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","div","RemoveAssetButton","onClick","CircularCloseIcon","NoContentContainer","background","className","styles","textAlign","left","top","color","fontSize","fontWeight","br","BagRow","asset","usdPrice","removeAsset","showRemove","grayscale","isMobile","formatEther","formatNumberOrString","useFormatter","loadedImage","setImageLoaded","useState","noImageAvailable","setNoImageAvailable","smallImageUrl","cardHovered","setCardHovered","handleMouseEnter","useCallback","handleMouseLeave","showRemoveButton","Boolean","assetEthPrice","updatedPriceInfo","ETHPrice","priceInfo","assetEthPriceFormatted","input","type","NumberType","NFTToken","assetUSDPriceFormatted","parseFloat","ethersFormatEther","FiatNFTToken","handleRemoveClick","e","preventDefault","stopPropagation","Link","to","getAssetHref","textDecoration","Row","onMouseEnter","onMouseLeave","as","src","alt","name","clsx","onLoad","onError","visibility","loadingBlock","Column","overflow","whiteSpace","tokenId","susFlag","Suspicious","gap","collectionIsVerified","VerifiedIcon","emphasis","ButtonEmphasis","medium","size","ButtonSize","flexShrink","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","from","gt","handleRemove","handleKeep","borderTopColor","SquareArrowUpIcon","SquareArrowDownIcon","marginLeft","marginRight","justifyContent","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","length","map","index","borderStyle","borderWidth","borderColor","borderRadius","zIndex","address","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","isOpen","toggleOpen","useReducer","s","timeLeft","setTimeLeft","useEffect","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","marginBottom","cursor","bodySmall","slice","ChevronUpBagIcon","ChevronDownBagIcon","CloseTimerIcon","id","BagContent","bagStatus","useBag","setBagStatus","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","useIsMobile","useMemo","recalculateBagUsingPooledAssets","ethUsdPrice","useNativeUsdPrice","unchangedAssets","priceChangedAssets","unavailableAssets","availableItems","filter","item","status","BagItemStatus","ADDED_TO_BAG","REVIEWED","REVIEWING_PRICE_CHANGE","UNAVAILABLE","hasAssetsInReview","hasAssets","sendAnalyticsEvent","NFTEventName","NFT_BUY_BAG_CHANGED","usd_value","bag_quantity","formatAssetEventProperties","BagStatus","IN_REVIEW","CONFIRM_REVIEW","ADDING_TO_BAG","Trace","logImpression","eventOnTrigger","properties","reverse","BuyButtonStates","BuyButtonStates2","getBuyButtonStateData","buyButtonState","handleClickOverride","usingPayWithAnyToken","priceImpact","defaultBuyButtonState","handleClick","buttonText","Trans","i18nKey","disabled","warningText","warningTextColor","deprecated_accentWarning","helperText","helperTextColor","neutral2","buttonColor","buttonTextColor","deprecated_accentTextLightPrimary","ConnectWalletButtonText","surface3","neutral1","priceImpactSeverity","usePurchaseAssets","signer","useEthersSigner","sendTransaction","useSendTransaction","state","setTransactionResponse","useTransactionResponse","setLocked","setBagLocked","setBagExpanded","reset","resetBag","setBagExpanded2","routingData","assetsToBuy","purchasingWithErc20","purchaseResponse","bagExpanded","useTokenInput","createWithEqualityFn","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","currency","clearInputCurrency","setTokenTradeInput","shallow","buildNftTradeInputFromBagItems","buildNftTradeInput","flatMap","marketplace","tokenType","ethAmountInput","amount","token","chainId","decimals","isNative","contractAddress","toUpperCase","quotePrice","getNextBagState","wishAssetsToBuy","route","hasPriceAdjustment","updatedAssets","compareAssetsWithTransactionRoute","shouldRefetchCalldata","unchanged","priceChanged","unavailable","filterUpdatedAssetsByState","hasUnavailableAssets","shouldReview","newBagItems","unavailableAsset","changedAsset","unchangedAsset","createBagFromUpdatedAssets","nextBagStatus","CONFIRM_QUOTE","CONFIRMING_IN_WALLET","evaluateNextBagState","buildRoutingItem","routingItem","action","RoutingActions","Buy","toLowerCase","amountIn","price","value","assetIn","baseAsset","basePrice","baseDecimals","amountOut","toString","assetOut","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","data","calldata","toAddress","useFetchAssets","account","useAccount","isLocked","bagIsLocked","itemsInBag2","setBagStatus2","didOpenUnavailableAssets2","setDidOpenUnavailableAssets2","setItemsInBag2","fetchGqlRoute","useNftRouteLazyQuery","purchaseAssets","resetStateBeforeFetch","FETCHING_ROUTE","variables","senderAddress","nftTrades","tokenTrades","onCompleted","nftRoute","getPurchasableAssets","buildPools","pools","pool","isPool","nativeCurrencyAddress","isUniverseChainId","getChainInfo","nativeCurrency","DEFAULT_NATIVE_ADDRESS","pair","tokenAmountA","reserve0","quotient","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","buildTradeRouteInput","swap","swapAmounts","inputAmount","outputAmount","isToken","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","hasRoutes","isClassicTrade","routes","hasInputAmount","hasAllowance","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","FooterContainer","Footer","FooterHeader","CurrencyRow","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","BodySmall","CurrencyInput","ActionButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","Warning","children","data-testid","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","formatEther2","TradeState","LOADING","toExact","symbol","FiatValue","usdcValue","t","useTranslation","MouseoverTooltip","text","displayPercentage","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","setModalIsOpen","eventProperties","accountDrawer","useAccountDrawer","useTheme","isSupportedChain","useIsSupportedChainId","connected","isConnected","useBagTotalEthPrice","inputCurrency2","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","bagStatus2","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","UniverseChainId","Mainnet","universalRouterAddress","universalRouterAddressIsLoading","loading","useNftUniversalRouterAddressQuery","fetchPolicy","useNftUniversalRouterAddress","transactionState","setTransactionState","setState","transactionStateRef","useRef","subscribe","current","TxStateType","Confirming","Denied","Invalid","WARNING","New","useSubscribeTransactionState","fetchAssets","parsedOutputAmount","tryParseCurrencyAmount","maximumAmountIn","useDebouncedTrade","TradeType","EXACT_OUTPUT","RouterPreference","API","useAutoSlippageTolerance","maximumAmountIn2","useDerivedPayWithAnyTokenSwapInfo","usePermit2Allowance","nftURAddress","UNIVERSAL_ROUTER_ADDRESS","UniversalRouterVersion","V1_2","getURAddress","TradeFillType","Classic","loadingAllowance","AllowanceState","formatPercent","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","critical","usePriceImpact","fiatValueTradeInput","useUSDCValue","fiatValueTradeOutput","NATIVE_CHAIN_ID","nativeCurencyBalance","useCurrencyBalance","sufficientBalance","lessThan","totalEthPriceCurrencyAmount","CurrencyAmount","fromRawAmount","JSBI","greaterThan","switchChain","useSwitchChain","handleClick3","NOT_SUPPORTED_CHAIN","INSUFFICIENT_BALANCE","ERROR","open","WALLET_NOT_CONNECTED","IN_WALLET_CONFIRMATION","VALID","INVALID_TOKEN_ROUTE","NO_TOKEN_ROUTE_FOUND","FETCHING_TOKEN_ROUTE","allowanceRequired","REQUIRED","handleClick2","approveAndPermit","LOADING_ALLOWANCE","isApprovalPending","IN_WALLET_ALLOWANCE_APPROVAL","isApprovalLoading","PROCESSING_APPROVAL","REQUIRE_APPROVAL","CONFIRM_UPDATED_PRICE","PRICE_IMPACT_HIGH","PAY","traceEventProperties","using_erc20","SubHeaderSmall","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","ChevronDown","logPress","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","Loader","stroke","CurrencySearchModal","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","token_address","token_symbol","selectedCurrency","ClearButton","ButtonText","IconWrapper","OpacityHoverState","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","getCircleSizing","BagCloseIcon","StyledColumn","useIsPage","PageType","NFTS_PROFILE","Center","LargeTagIcon","themeVars","colors","neutral3","BagIcon","subhead","useSellAsset","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","img","asset_contract","ProfileBagContent","sellAssets","ProfileAssetRow","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","surface1","deprecated_shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","sm","xxxl","DetailsPageBackground","ContinueButton","transition","duration","opacity","hover","ScrollingIndicator","show","marginX","borderBottomColor","resetSellAssets","reset2","sellAssets2","setProfilePageState","useProfilePageState","setProfilePageState2","toggleBag","isDetailsPage","NFTS_DETAILS","isNFTPage","NFTS","isModalOpen","userCanScroll","scrollRef","scrollProgress","scrollHandler","setUserCanScroll","setScrollProgress","node","canScroll","scrollHeight","clientHeight","event","scrollTop","currentTarget","containerHeight","useSubscribeScrollState","handleCloseBag","manualClose","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","EmptyState","ref","onScroll","ProfilePageStateType","LISTING","NFT_PROFILE_PAGE_START_SELL","list_quantity","collection_addresses","token_ids","Overlay","nativeEvent","stopImmediatePropagation","noop","reduce","total","add","useBagTotalUsdPrice","create","txHash","purchasedWithErc20","clearTxHash","newState","selectedAssets","transactionData","getAddress","txNoGasLimit","gasLimit","estimateGas","mul","tx","Signing","res","hash","NFT_BUY_BAG_SIGNED","transaction_hash","txReceipt","wait","nftsPurchased","findNFTsPurchased","nftsNotPurchased","findNFTsNotPurchased","Success","Failed","code","logger","error","tags","file","function","signerAddress","toBuy","txRoute","logs","erc721Interface","Interface","ERC721","erc1155Interface","ERC1155","cryptopunksMarketInterface","CryptoPunksMarket","allTransferred","x","topics","getEventTopic","hexStripZeros","parseLog","args","transferredItems","assetToBuy","some","purchasedNft","forEach","selectedAsset","find","transactionResponse","txResponse","useUSDPrice","useNativeCurrency","parsedAmount","useUsdPriceofNftAsset","fetchedPriceData","getRarityStatus","rarityStatusCache","has","get","hasRarity","Array","reducer","rarity","origin","getMarketplaceIcon","Markets","Opensea","SquareOpenSeaMarketplaceIcon","LooksRare","SquareLooksRareMarketplaceIcon","X2Y2","SquareLooksX2Y2MarketplaceIcon","gradientId","uuidv4","Blur","SquareLooksBlurMarketplaceIcon","Sudoswap","SquareSudoSwapMarketplaceIcon","NFTX","SquareNftXMarketplaceIcon","Gem","SquareGemMarketplaceIcon","Zora","SquareZoraMarketplaceIcon","Ensvision","SquareEnsVisionMarketplaceIcon","Cryptopunks","SquareCryptopunksMarketplaceIcon","Rarible","SquareRaribleMarketplaceIcon","Foundation","SquareFoundationMarketplaceIcon","NFT20","SquareNft20MarketplaceIcon","generateTweetForAsset","encodeURIComponent","generateTweetForPurchase","txHashUrl","multipleCollections","collectionUrl","tweetText","generateTweetForList","collection","twitterUrl","listings","newListings","Math","min","listing","marketplaces","market","join","collections","Set","items","mapAssetsToCollections","isInSameSudoSwapPool","assetA","assetB","assetASudoSwapPoolParameters","assetBSudoSwapPoolParameters","sellorders","protocolParameters","assetAPoolAddress","poolAddress","assetBPoolAddress","isInSameMarketplaceCollection","token_types","PRECISION","PROTOCOL_FEE_MULTIPLIER","calcSudoSwapPrice","sudoSwapPool","delta","ammFeeFixed","spotPrice","poolMetadata","bondingCurve","getPoolParameters","currentPrice","poolFee","i","calcSudoSwapLinearBondingCurve","calcSudoSwapExponentialBondingCurve","xykCurrentPrice","virtualTokenBalance","virtualNFTBalance","sub","isZero","calcSudoSwapXykBondingCurve","protocolFee","tradeFee","calculateScaledPrice","calcPoolPrice","nft","amountToBuy","marginalBuy","pow","ammFee","ammFeePercent","sixteenmul","ethReserves","toLocaleString","useGrouping","tokenReserves","numerator","denominator","marginalnumerator","marginaldenominator","marginalprice","calcAmmBasedPoolprice","calcAvgGroupPoolPrice","isPooledMarket","every","isPriceChangedAsset","itemsInPool","bagItem","calculatedPrice","recalculatePooledAssetPrice","findIndex","itemInPool","getPriceDiff","oldPrice","newPrice","hasPriceDiff","hasVisiblePriceDiff","isAveragedPrice","numberOfAssetsInPool","routeItem","itemInRouteAndSamePool","expectedPrice","getRouteForItem","routeAsset","isTheSame","itemHasRoute","isUnavailable","newPriceInfo","updatedAssetPriceDifference","sortUpdatedAssets","y","getTotalNftValue","nfts","ethTotal","sort"],"sourceRoot":""}